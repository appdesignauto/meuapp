/**
 * Script simplificado ESPECIFICAMENTE para criar um usu√°rio a partir de um webhook
 * Esta vers√£o foi simplificada ao m√°ximo para garantir funcionamento imediato
 */

import pg from 'pg';
import crypto from 'crypto';

const { Pool } = pg;

// Fun√ß√£o para criar um usu√°rio diretamente
async function criarUsuarioManual(email, nome, plano = 'premium') {
  console.log(`üîÑ Criando usu√°rio para ${email}`);
  
  // Configurar conex√£o com banco de dados
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL
  });
  
  try {
    // Gerar dados do usu√°rio
    const username = email.split('@')[0] + '-' + Date.now().toString().slice(-6);
    const password = 'auto@123';
    
    // Gerar hash seguro da senha
    const salt = crypto.randomBytes(16).toString('hex');
    const hash = crypto.scryptSync(password, salt, 64).toString('hex');
    const hashedPassword = `${hash}.${salt}`;
    
    console.log(`üîß Dados gerados: username=${username}`);
    
    // Verificar se o usu√°rio j√° existe
    const existingUser = await pool.query(
      'SELECT id FROM users WHERE email = $1',
      [email]
    );
    
    let userId;
    
    if (existingUser.rows.length > 0) {
      // Atualizar usu√°rio existente
      userId = existingUser.rows[0].id;
      console.log(`üîÑ Atualizando usu√°rio existente com ID: ${userId}`);
      
      await pool.query(
        `UPDATE users SET 
          nivelacesso = 'premium',
          origemassinatura = 'hotmart',
          tipoplano = $1,
          dataassinatura = NOW(),
          dataexpiracao = NOW() + INTERVAL '1 year',
          atualizadoem = NOW()
          WHERE id = $2`,
        [plano, userId]
      );
      
      console.log(`‚úÖ Usu√°rio atualizado com sucesso`);
    } else {
      // Criar novo usu√°rio com campos essenciais
      console.log('üìù Criando novo usu√°rio no banco de dados...');
      
      const insertUser = await pool.query(
        `INSERT INTO users (
          username, password, email, name, 
          role, isactive, emailconfirmed
        ) VALUES (
          $1, $2, $3, $4, 
          'user', true, true
        ) RETURNING id`,
        [username, hashedPassword, email, nome]
      );
      
      userId = insertUser.rows[0].id;
      console.log(`‚úÖ Usu√°rio criado com ID: ${userId}`);
      
      // Atualizar campos adicionais em query separada
      await pool.query(
        `UPDATE users SET 
          nivelacesso = 'premium',
          origemassinatura = 'hotmart', 
          tipoplano = $1,
          dataassinatura = NOW(),
          dataexpiracao = NOW() + INTERVAL '1 year',
          criadoem = NOW(),
          atualizadoem = NOW()
          WHERE id = $2`,
        [plano, userId]
      );
    }
    
    // Criar assinatura
    const transactionId = `MANUAL-${Date.now()}`;
    
    await pool.query(
      `INSERT INTO subscriptions (
        "userId", "planType", status, "startDate", "endDate", 
        origin, transactionid, "createdAt", "updatedAt"
      ) VALUES (
        $1, $2, 'active', NOW(), NOW() + INTERVAL '1 year',
        'hotmart', $3, NOW(), NOW()
      )`,
      [userId, plano, transactionId]
    );
    
    console.log(`‚úÖ Assinatura registrada para usu√°rio ${userId}`);
    console.log('‚úÖ Processamento conclu√≠do com sucesso');
    
    return { userId, username, success: true };
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error);
    return { success: false, error: error.message };
  } finally {
    await pool.end();
  }
}

// Processar webhook espec√≠fico por ID
async function processarWebhook(webhookId) {
  console.log(`üîÑ Processando webhook ID: ${webhookId}`);
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL
  });
  
  try {
    // Buscar o webhook pelo ID
    const webhookResult = await pool.query(
      'SELECT * FROM webhook_logs WHERE id = $1',
      [webhookId]
    );
    
    if (webhookResult.rows.length === 0) {
      console.error(`‚ùå Webhook ID ${webhookId} n√£o encontrado`);
      return false;
    }
    
    const webhook = webhookResult.rows[0];
    console.log(`‚úÖ Webhook encontrado: ${webhook.id}, Email: ${webhook.email}`);
    
    // Verificar se o webhook j√° foi processado
    if (webhook.status === 'processed') {
      console.log(`‚è© Webhook ${webhookId} j√° foi processado anteriormente`);
      return true;
    }
    
    // Obter dados do webhook
    const email = webhook.email;
    let payload;
    
    try {
      // O payload pode j√° ser um objeto ou uma string JSON
      if (typeof webhook.raw_payload === 'string') {
        payload = JSON.parse(webhook.raw_payload);
      } else {
        payload = webhook.raw_payload;
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao processar payload, usando valores padr√£o');
      payload = { data: { buyer: { name: email.split('@')[0] } } };
    }
    
    // Extrair nome do comprador e tipo de plano
    const name = payload.data?.buyer?.name || email.split('@')[0];
    const planType = 'premium';
    
    console.log(`üìã Dados extra√≠dos: Nome=${name}, Email=${email}, Plano=${planType}`);
    
    // Criar o usu√°rio usando a fun√ß√£o manual
    const result = await criarUsuarioManual(email, name, planType);
    
    if (result.success) {
      // Marcar webhook como processado
      await pool.query(
        `UPDATE webhook_logs SET status = 'processed' WHERE id = $1`,
        [webhookId]
      );
      
      console.log(`‚úÖ Webhook ${webhookId} processado com sucesso!`);
      return true;
    } else {
      console.error(`‚ùå Erro ao processar webhook ${webhookId}:`, result.error);
      
      // Marcar webhook como erro
      await pool.query(
        `UPDATE webhook_logs SET status = 'error', error_message = $1 WHERE id = $2`,
        [result.error, webhookId]
      );
      
      return false;
    }
  } catch (error) {
    console.error(`‚ùå Erro ao processar webhook ${webhookId}:`, error);
    return false;
  } finally {
    await pool.end();
  }
}

// Verificar argumentos de linha de comando
const args = process.argv.slice(2);

if (args.length === 0) {
  console.log('‚ö†Ô∏è Uso: node criar-usuario-webhook.js [comando] [par√¢metros]');
  console.log('Comandos dispon√≠veis:');
  console.log('  criar-usuario [email] [nome] - Cria um usu√°rio diretamente');
  console.log('  processar-webhook [id] - Processa um webhook espec√≠fico pelo ID');
  process.exit(1);
}

const comando = args[0];

if (comando === 'criar-usuario') {
  if (args.length < 3) {
    console.error('‚ùå Email e nome s√£o obrigat√≥rios');
    process.exit(1);
  }
  
  const email = args[1];
  const nome = args[2];
  const plano = args[3] || 'premium';
  
  criarUsuarioManual(email, nome, plano)
    .then(result => {
      if (result.success) {
        console.log(`\n‚úÖ Usu√°rio ${result.username} criado com sucesso (ID: ${result.userId})`);
      } else {
        console.error(`\n‚ùå Falha ao criar usu√°rio: ${result.error}`);
      }
    })
    .catch(error => {
      console.error('‚ùå Erro fatal:', error);
    });
} else if (comando === 'processar-webhook') {
  if (args.length < 2) {
    console.error('‚ùå ID do webhook √© obrigat√≥rio');
    process.exit(1);
  }
  
  const webhookId = parseInt(args[1]);
  
  processarWebhook(webhookId)
    .then(success => {
      if (success) {
        console.log(`\n‚úÖ Webhook ${webhookId} processado com sucesso`);
      } else {
        console.error(`\n‚ùå Falha ao processar webhook ${webhookId}`);
      }
    })
    .catch(error => {
      console.error('‚ùå Erro fatal:', error);
    });
} else {
  console.error(`‚ùå Comando desconhecido: ${comando}`);
  process.exit(1);
}