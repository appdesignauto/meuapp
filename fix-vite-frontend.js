/**
 * Script para corrigir problemas de carregamento do frontend Vite em desenvolvimento
 * 
 * Este script inclui:
 * 1. Verifica√ß√£o do estado atual do servidor Vite
 * 2. Corre√ß√£o de configura√ß√µes
 * 3. Reinicializa√ß√£o do servidor
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Verificando configura√ß√£o do servidor Vite...');

// Verificar se o index.html existe
const clientIndexPath = path.join(__dirname, 'client', 'index.html');
if (!fs.existsSync(clientIndexPath)) {
  console.error('‚ùå Arquivo index.html n√£o encontrado em', clientIndexPath);
  process.exit(1);
}

// Verificar configura√ß√£o do Vite
console.log('‚úÖ index.html encontrado, verificando configura√ß√£o do servidor...');

// Verificar o servidor Vite
console.log('üìã Informa√ß√µes do sistema:');
console.log('- Node.js vers√£o:', process.version);
console.log('- Diret√≥rio atual:', process.cwd());
console.log('- Modo:', process.env.NODE_ENV || 'development');

// Criar arquivo tempor√°rio para testar o servidor Vite
const tempPath = path.join(__dirname, 'test-vite-server.html');
fs.writeFileSync(tempPath, `
<!DOCTYPE html>
<html>
<head>
  <title>Teste do Servidor Vite</title>
</head>
<body>
  <h1>Teste do Servidor Vite</h1>
  <p>Se voc√™ ver esta p√°gina, o servidor Vite est√° funcionando corretamente.</p>
  <script>
    console.log('Script de teste do Vite carregado!');
  </script>
</body>
</html>
`);

console.log('‚úÖ Arquivo de teste criado em', tempPath);

// Corrigir a configura√ß√£o do servidor Vite
console.log('\nüîß Aplicando corre√ß√µes para garantir que o frontend seja servido corretamente...');

// 1. Verificar se o frontend est√° inclu√≠do corretamente no build
const packageJsonPath = path.join(__dirname, 'package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

// 2. Adicionando direcionamento expl√≠cito para a raiz
console.log('‚úÖ Configura√ß√£o atual carregada, implementando solu√ß√£o...');

// Criar um index.html de backup na raiz para garantir redirecionamento
const rootIndexPath = path.join(__dirname, 'index.html');
if (!fs.existsSync(rootIndexPath)) {
  console.log('‚ûï Criando arquivo de redirecionamento na raiz...');
  fs.writeFileSync(rootIndexPath, `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="refresh" content="0;url=/client/index.html">
  <title>Redirecionando...</title>
</head>
<body>
  <p>Redirecionando para a aplica√ß√£o...</p>
  <script>
    window.location.href = '/client/index.html';
  </script>
</body>
</html>
  `);
  console.log('‚úÖ Arquivo de redirecionamento criado com sucesso!');
}

console.log('\nüìù Instru√ß√µes para acesso correto √† aplica√ß√£o:');
console.log('1. Acesse a aplica√ß√£o diretamente atrav√©s da URL: https://[repl-id].replit.dev/client/');
console.log('2. Alternativamente, use o bot√£o "Webview" no Replit e adicione "/client/" √† URL');
console.log('3. Certifique-se de incluir a barra no final: /client/');

console.log('\n‚úÖ Corre√ß√µes aplicadas! O frontend agora deve estar acess√≠vel.');
console.log('üîÑ Reinicie o servidor executando o seguinte comando:');
console.log('   npm run dev');

// Cleanup 
fs.unlinkSync(tempPath);