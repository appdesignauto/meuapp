/**
 * Script de diagn√≥stico para verificar o problema de webhooks da Hotmart
 */
const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');

// Criar uma conex√£o com o banco de dados
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

async function diagnosticarWebhooks() {
  console.log('üîç Iniciando diagn√≥stico de webhooks da Hotmart...');
  
  try {
    // 1. Verificar configura√ß√µes da URL de webhook
    const settingsQuery = await pool.query('SELECT * FROM "subscriptionSettings" WHERE id = 1');
    const settings = settingsQuery.rows[0];
    
    console.log('\nüìã Configura√ß√µes atuais:');
    console.log('- URL de webhook: ' + (settings.webhookUrl || 'N√ÉO CONFIGURADA'));
    console.log('- Ambiente Hotmart: ' + settings.hotmartEnvironment);
    console.log('- Cliente ID Hotmart: ' + (settings.hotmartClientId ? (settings.hotmartClientId.slice(0, 4) + '...') : 'N√£o definido'));
    console.log('- Chave Secreta: ' + (settings.webhookSecretKey ? (settings.webhookSecretKey.slice(0, 4) + '...') : 'N√£o definida'));
    
    // 2. Verificar os √∫ltimos webhooks recebidos
    const logsQuery = await pool.query('SELECT * FROM "webhookLogs" WHERE source = \'hotmart\' ORDER BY id DESC LIMIT 5');
    const logs = logsQuery.rows;
    
    console.log('\nüìä √öltimos webhooks da Hotmart registrados:');
    if (logs.length === 0) {
      console.log('‚ùå Nenhum webhook da Hotmart registrado no sistema.');
    } else {
      logs.forEach(log => {
        console.log(`- ID: ${log.id}, Email: ${log.email || 'N/A'}, Status: ${log.status}, Evento: ${log.eventType}`);
      });
    }
    
    // 3. Verificar se existe algum webhook com os emails informados
    const emailsToCheck = ['ws.advogaciasm@gmail.com', 'kitescolinhacrista@gmail.com'];
    const emailQuery = await pool.query('SELECT * FROM "webhookLogs" WHERE email = ANY($1)', [emailsToCheck]);
    
    console.log('\nüîé Verifica√ß√£o de emails espec√≠ficos:');
    if (emailQuery.rows.length === 0) {
      console.log(`‚ùå Nenhum webhook encontrado para os emails: ${emailsToCheck.join(', ')}`);
    } else {
      emailQuery.rows.forEach(log => {
        console.log(`- Email: ${log.email}, ID: ${log.id}, Status: ${log.status}, Evento: ${log.eventType}`);
      });
    }
    
    // 4. Diagnosticar a rota de webhooks
    console.log('\nüõ†Ô∏è Diagn√≥stico de rotas:');
    
    // Verificar se h√° m√∫ltiplas rotas de webhook definidas
    try {
      const indexPath = path.join(process.cwd(), 'server', 'index.ts');
      if (fs.existsSync(indexPath)) {
        const indexContent = fs.readFileSync(indexPath, 'utf8');
        const webhookMatches = indexContent.match(/app\.post\(['"]\/webhook\/hotmart/g);
        
        if (webhookMatches && webhookMatches.length > 0) {
          console.log(`‚úÖ Rota de webhook encontrada no arquivo principal: ${webhookMatches.length} ocorr√™ncias`);
        } else {
          console.log('‚ùå Rota de webhook n√£o encontrada no arquivo principal.');
        }
      }
    } catch (err) {
      console.log('‚ùå Erro ao verificar arquivos de rotas: ' + err.message);
    }

    // 5. Resumo do diagn√≥stico
    console.log('\nüìë RESUMO DO DIAGN√ìSTICO:');
    if (!settings.webhookUrl) {
      console.log('‚ùå PROBLEMA CR√çTICO: URL de webhook n√£o est√° configurada. A Hotmart n√£o sabe para onde enviar as notifica√ß√µes.');
      console.log('   - Solu√ß√£o: Configure a URL de webhook no painel da Hotmart para: https://designauto.com.br/webhook/hotmart');
    } else {
      console.log('‚úÖ URL de webhook configurada: ' + settings.webhookUrl);
    }
    
    if (logs.length === 0) {
      console.log('‚ö†Ô∏è ALERTA: Nenhum webhook da Hotmart foi registrado. Verifique se a URL est√° correta no painel da Hotmart.');
    } else {
      console.log('‚úÖ Webhooks da Hotmart est√£o sendo registrados no sistema.');
    }
    
    if (emailQuery.rows.length === 0) {
      console.log('‚ö†Ô∏è ALERTA: Os webhooks espec√≠ficos n√£o foram encontrados. Verifique se eles foram realmente enviados pela Hotmart.');
    }
    
    // 6. Recomenda√ß√µes
    console.log('\nüöÄ RECOMENDA√á√ïES:');
    console.log('1. Verifique se a URL de webhook no painel da Hotmart √© exatamente: https://designauto.com.br/webhook/hotmart');
    console.log('2. Certifique-se de que tamb√©m est√° configurada a URL: https://designauto.com.br/api/webhooks/hotmart (rota alternativa)');
    console.log('3. Verifique se o token secreto est√° configurado corretamente no painel da Hotmart');
    console.log('4. Ao reprocessar webhooks no painel da Hotmart, confirme que o status retornado √© 200 OK');
  } catch (error) {
    console.error('‚ùå Erro durante o diagn√≥stico: ', error);
  } finally {
    await pool.end();
  }
}

diagnosticarWebhooks();
