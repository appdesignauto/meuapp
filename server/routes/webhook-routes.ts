import { Router, Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { HotmartService } from '../services/hotmart-service';

const prisma = new PrismaClient();
const hotmartService = new HotmartService(prisma);
const router = Router();

// Endpoint para webhook da Hotmart
router.post('/hotmart', async (req: Request, res: Response) => {
  try {
    // Log detalhado para diagn√≥stico
    console.log('[Webhook] Cabe√ßalhos recebidos:', JSON.stringify(req.headers));
    console.log('[Webhook] Corpo recebido:', JSON.stringify(req.body));
    
    // Verifica√ß√£o de token simplificada
    // Prioriza o corpo da requisi√ß√£o primeiro, depois tenta os cabe√ßalhos
    const token = 
      (req.body && req.body.hottok) || // Busca primeiro no corpo (formato mais comum na Hotmart)
      req.headers['x-hotmart-hottok']?.toString() || 
      req.headers['x-hotmart-webhook-token']?.toString() ||
      null;
    
    console.log('üîë [Webhook] Token recebido:', token);
    console.log('üîë [Webhook] Token esperado:', process.env.HOTMART_WEBHOOK_SECRET);
    
    // Verifica√ß√£o do token - valida√ß√£o desativada temporariamente para debugging
    // Remova o coment√°rio abaixo quando estiver tudo funcionando
    /*
    if (!token || token !== process.env.HOTMART_WEBHOOK_SECRET) {
      console.warn("üîí [Webhook] Token de autentica√ß√£o ausente ou inv√°lido");
      return res.status(200).json({
        success: false,
        message: 'Token inv√°lido ou ausente',
        note: 'Webhook rejeitado, mas confirmamos o recebimento'
      });
    }
    */
    
    // ATEN√á√ÉO: VALIDA√á√ÉO DE TOKEN TEMPORARIAMENTE DESATIVADA
    // Esta linha abaixo deve ser removida quando a integra√ß√£o estiver funcionando!
    console.warn("‚ö†Ô∏è [AVISO] Valida√ß√£o de token Hotmart est√° temporariamente desativada para testes");
    
    // Extrair informa√ß√µes do evento - tamb√©m flex√≠vel
    let event = req.headers['x-hotmart-event'] as string;
    
    // Se n√£o encontrar no cabe√ßalho padr√£o, verificar em alternativas conhecidas
    if (!event && req.body.event) {
      event = req.body.event;
    }
    
    // Se ainda n√£o tiver evento, assumir baseado na opera√ß√£o no corpo
    if (!event && req.body.data && req.body.data.purchase) {
      event = 'PURCHASE_APPROVED'; // Assumir compra aprovada como padr√£o
    }
    
    const payload = req.body;
    
    console.log(`[Webhook] Processando evento da Hotmart: ${event || 'evento n√£o identificado'}`);
    
    // Se n√£o tiver identificado um evento, definir um valor padr√£o
    if (!event) {
      console.warn('[Webhook] AVISO: Tipo de evento da Hotmart ausente, prosseguindo como evento gen√©rico');
      event = 'UNDEFINED_EVENT';
    }

    // Usar o token obtido anteriormente como assinatura para valida√ß√£o
    const result = await hotmartService.processWebhook(event, payload, token as string);
    
    if (result.success) {
      console.log(`[Webhook] Evento da Hotmart processado com sucesso: ${event}`);
      return res.status(200).json({ 
        success: true, 
        message: result.message 
      });
    } else {
      console.warn(`[Webhook] Erro ao processar evento da Hotmart: ${result.message}`);
      // Importante: Sempre retornar 200 para a Hotmart, mesmo com erro
      // Isso evita que a Hotmart tente reenviar o mesmo webhook repetidamente
      return res.status(200).json({ 
        success: false, 
        message: result.message,
        note: "Erro registrado, mas confirmamos o recebimento do webhook"
      });
    }
  } catch (error) {
    console.error('[Webhook] Erro interno ao processar webhook da Hotmart:', error);
    // Sempre responder com 200 mesmo em caso de erro interno
    // A Hotmart n√£o precisa reenviar o webhook, n√≥s √© que precisamos corrigir o problema
    return res.status(200).json({ 
      success: false, 
      message: 'Erro interno ao processar webhook, mas confirmando recebimento' 
    });
  }
});

// Endpoint para simular webhook da Hotmart (apenas para testes)
router.post('/hotmart/simulate', async (req: Request, res: Response) => {
  // Verificar se est√° em ambiente de desenvolvimento
  if (process.env.NODE_ENV !== 'development' && process.env.HOTMART_SANDBOX !== 'true') {
    return res.status(403).json({ 
      success: false, 
      message: 'Esta rota s√≥ est√° dispon√≠vel em ambiente de desenvolvimento ou sandbox' 
    });
  }

  try {
    const payload = req.body;
    const event = req.body.event || 'PURCHASE_APPROVED'; // Evento padr√£o
    const signature = 'simulado'; // Assinatura simulada
    
    console.log(`[Webhook Simulado] Simulando evento da Hotmart: ${event}`);
    
    const result = await hotmartService.processWebhook(event, payload, signature);
    
    return res.status(200).json({ 
      success: true, 
      simulationResult: result 
    });
  } catch (error) {
    console.error('[Webhook Simulado] Erro ao simular webhook:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Erro ao simular webhook' 
    });
  }
});

// Endpoint para listar logs de webhook (apenas para administradores)
router.get('/logs', async (req: Request, res: Response) => {
  try {
    // Aqui deveria haver verifica√ß√£o de autentica√ß√£o e autoriza√ß√£o
    // Mas para simplicidade, vamos apenas buscar os logs
    const logs = await hotmartService.getRecentWebhookLogs();
    return res.status(200).json({ logs });
  } catch (error) {
    console.error('Erro ao buscar logs de webhook:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Erro ao buscar logs de webhook' 
    });
  }
});

// Endpoint para listar assinaturas ativas (apenas para administradores)
router.get('/subscriptions', async (req: Request, res: Response) => {
  try {
    // Aqui deveria haver verifica√ß√£o de autentica√ß√£o e autoriza√ß√£o
    // Mas para simplicidade, vamos apenas buscar as assinaturas
    const subscriptions = await hotmartService.getActiveSubscriptions();
    return res.status(200).json({ subscriptions });
  } catch (error) {
    console.error('Erro ao buscar assinaturas:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Erro ao buscar assinaturas' 
    });
  }
});

export default router;