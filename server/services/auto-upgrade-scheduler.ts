/**
 * Sistema de agendamento autom√°tico para e-mails de upgrade
 * Executa a cada 2 minutos verificando usu√°rios cadastrados h√° mais de 10 minutos
 */

import { UpgradeEmailService } from './upgrade-email-service.js';

export class AutoUpgradeScheduler {
  private static instance: AutoUpgradeScheduler;
  private intervalId: NodeJS.Timeout | null = null;
  private upgradeEmailService: UpgradeEmailService;
  private isRunning = false;

  private constructor() {
    this.upgradeEmailService = new UpgradeEmailService();
  }

  public static getInstance(): AutoUpgradeScheduler {
    if (!AutoUpgradeScheduler.instance) {
      AutoUpgradeScheduler.instance = new AutoUpgradeScheduler();
    }
    return AutoUpgradeScheduler.instance;
  }

  /**
   * Inicia o agendamento autom√°tico (executa a cada 2 minutos)
   */
  public start(): void {
    if (this.isRunning) {
      console.log('üìß [AutoUpgradeScheduler] Agendamento j√° est√° em execu√ß√£o');
      return;
    }

    console.log('üöÄ [AutoUpgradeScheduler] Iniciando agendamento autom√°tico de e-mails de upgrade');
    console.log('‚è∞ [AutoUpgradeScheduler] Verifica√ß√µes a cada 2 minutos para usu√°rios cadastrados h√° mais de 10 minutos');

    this.intervalId = setInterval(async () => {
      await this.executeUpgradeCheck();
    }, 2 * 60 * 1000); // 2 minutos

    this.isRunning = true;

    // Executa uma vez imediatamente ao iniciar
    setTimeout(() => {
      this.executeUpgradeCheck();
    }, 5000); // 5 segundos ap√≥s iniciar
  }

  /**
   * Para o agendamento autom√°tico
   */
  public stop(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      this.isRunning = false;
      console.log('üõë [AutoUpgradeScheduler] Agendamento autom√°tico parado');
    }
  }

  /**
   * Executa verifica√ß√£o e envio de e-mails de upgrade
   */
  private async executeUpgradeCheck(): Promise<void> {
    try {
      console.log('üîç [AutoUpgradeScheduler] Verificando usu√°rios eleg√≠veis para upgrade...');

      const stats = await this.upgradeEmailService.getUpgradeEmailStats();
      
      if (stats.eligibleUsers === 0) {
        console.log('‚ÑπÔ∏è [AutoUpgradeScheduler] Nenhum usu√°rio eleg√≠vel encontrado nesta verifica√ß√£o');
        return;
      }

      console.log(`üìä [AutoUpgradeScheduler] ${stats.eligibleUsers} usu√°rios eleg√≠veis encontrados`);

      // Envia at√© 10 e-mails por execu√ß√£o para n√£o sobrecarregar
      const result = await this.upgradeEmailService.sendBatchUpgradeEmails(10);
      
      if (result.sent > 0) {
        console.log(`‚úÖ [AutoUpgradeScheduler] ${result.sent} e-mails de upgrade enviados com sucesso`);
      }

      if (result.failed > 0) {
        console.log(`‚ö†Ô∏è [AutoUpgradeScheduler] ${result.failed} e-mails falharam no envio`);
      }

    } catch (error) {
      console.error('‚ùå [AutoUpgradeScheduler] Erro na verifica√ß√£o autom√°tica:', error);
    }
  }

  /**
   * Retorna status do agendamento
   */
  public getStatus(): { isRunning: boolean; nextCheck: string } {
    return {
      isRunning: this.isRunning,
      nextCheck: this.isRunning ? 'A cada 2 minutos' : 'Parado'
    };
  }

  /**
   * Executa verifica√ß√£o manual (para testes)
   */
  public async executeManualCheck(): Promise<any> {
    console.log('üß™ [AutoUpgradeScheduler] Executando verifica√ß√£o manual...');
    return await this.executeUpgradeCheck();
  }
}