import fetch from 'node-fetch';
import { createHash } from 'crypto';
import { getBrazilDateTime, getBrazilISOString } from '../utils/date-utils';
import { db } from '../db';
import { siteSettings } from '@shared/schema';

// Chave da API do Brevo
const BREVO_API_KEY = process.env.BREVO_API_KEY;

// Verificar a chave na inicializa√ß√£o
console.log(`[EmailService] Verificando BREVO_API_KEY: ${BREVO_API_KEY ? 'Chave presente com ' + BREVO_API_KEY.length + ' caracteres' : 'Chave n√£o configurada!'}`);

// Dom√≠nio para URLs de redefini√ß√£o
const APP_DOMAIN = process.env.NODE_ENV === 'production' 
  ? 'https://design-auto-hub-1-appdesignauto.replit.app'
  : 'http://localhost:5000';

// Modo de desenvolvimento (simula√ß√£o de envio)
// Em ambiente de desenvolvimento local, pode-se optar por simular o envio de emails
// Em produ√ß√£o, usa sempre a API real do Brevo
// Para testes em desenvolvimento, estamos usando a API real por padr√£o
const DEV_MODE = false;

// Configura√ß√µes de remetentes dispon√≠veis no Brevo
const SENDERS = {
  suporte: {
    name: 'Suporte Design Auto',
    email: 'suporte@designauto.com.br'
  },
  contato: {
    name: 'Design Auto',
    email: 'contato@designauto.com.br'
  }
};

// Remetente padr√£o para emails
const DEFAULT_SENDER = SENDERS.suporte;

// URL base da API do Brevo
const BREVO_API_URL = 'https://api.brevo.com/v3';

// Armazenamento de emails simulados enviados (para desenvolvimento)
interface SimulatedEmail {
  to: string;
  from: string;
  subject: string;
  html: string;
  text: string;
  sentAt: Date;
}

class EmailService {
  private initialized: boolean = false;
  private logs: string[] = [];
  private simulatedEmails: SimulatedEmail[] = [];

  constructor() {
    this.initialize();
  }

  /**
   * Inicializa o servi√ßo de e-mail do Brevo
   */
  private initialize(): void {
    try {
      if (DEV_MODE) {
        this.initialized = true;
        this.log('‚úÖ Servi√ßo de e-mail inicializado em modo de desenvolvimento (simula√ß√£o)');
        return;
      }
      
      if (!BREVO_API_KEY) {
        this.log('‚ùå Erro: BREVO_API_KEY n√£o foi configurada no ambiente');
        this.log('‚ö†Ô∏è Sistema continuar√° em modo de simula√ß√£o de emails');
        
        // Force DEV_MODE to true if no API key is available
        (global as any).forceDevMode = true;
        return;
      }

      const apiKeyLength = BREVO_API_KEY.length;
      if (apiKeyLength < 10) {
        this.log(`‚ö†Ô∏è BREVO_API_KEY parece inv√°lida (${apiKeyLength} caracteres)`);
        this.log('‚ö†Ô∏è Sistema continuar√° em modo de simula√ß√£o de emails');
        
        // Force DEV_MODE to true if API key seems invalid
        (global as any).forceDevMode = true;
        return;
      }

      this.initialized = true;
      this.log('‚úÖ Servi√ßo de e-mail Brevo inicializado com sucesso');
      this.log(`üîë Verifica√ß√£o da Brevo API: chave com ${apiKeyLength} caracteres detectada`);
    } catch (error) {
      this.log(`‚ùå Erro ao inicializar servi√ßo de e-mail: ${error instanceof Error ? error.message : String(error)}`);
      
      // Force DEV_MODE to true in case of initialization error
      (global as any).forceDevMode = true;
    }
  }

  /**
   * Registra logs para diagn√≥stico
   */
  private log(message: string): void {
    // Usar o utilit√°rio importado para timestamp no timezone do Brasil (UTC-3)
    // N√£o podemos usar require em m√≥dulos ES, portanto o import √© feito no topo do arquivo
    const timestamp = getBrazilISOString();
    const logMessage = `[EmailService ${timestamp}] ${message}`;
    console.log(logMessage);
    this.logs.push(logMessage);
  }

  /**
   * Obt√©m os logs do servi√ßo
   */
  public getLogs(): string[] {
    return [...this.logs];
  }

  /**
   * Limpa os logs do servi√ßo
   */
  public clearLogs(): void {
    this.logs = [];
  }

  /**
   * Obt√©m o logo oficial atual do sistema
   */
  private async getOfficialLogo(): Promise<string> {
    try {
      const settings = await db.select().from(siteSettings).limit(1);
      if (settings.length > 0 && settings[0].logoUrl) {
        // Construir URL completa para usar nos e-mails
        const logoUrl = settings[0].logoUrl;
        // Remove timestamp parameter if present for consistency
        const cleanLogoUrl = logoUrl.split('?')[0];
        return `https://designauto.com.br${cleanLogoUrl}`;
      }
      // Fallback para logo padr√£o
      return 'https://designauto.com.br/images/logos/logo_1745019394541_8q4daq.png';
    } catch (error) {
      this.log(`‚ö†Ô∏è Erro ao obter logo oficial: ${error instanceof Error ? error.message : String(error)}`);
      return 'https://designauto.com.br/images/logos/logo_1745019394541_8q4daq.png';
    }
  }

  /**
   * Substitui automaticamente logos antigos pelo logo oficial atual
   */
  private async updateLogoInContent(htmlContent: string): Promise<string> {
    try {
      const officialLogo = await this.getOfficialLogo();
      
      // Padr√µes de logos antigos para substituir
      const oldLogoPatterns = [
        /https:\/\/designauto\.com\.br\/images\/logos\/logo_\d+\.png/g,
        /https:\/\/designauto\.com\.br\/images\/logos\/logo_\d+_[a-z0-9]+\.png/g,
        /\/images\/logos\/logo_\d+\.png/g,
        /\/images\/logos\/logo_\d+_[a-z0-9]+\.png/g
      ];

      let updatedContent = htmlContent;
      
      // Substituir todos os padr√µes de logos antigos
      oldLogoPatterns.forEach(pattern => {
        updatedContent = updatedContent.replace(pattern, officialLogo);
      });

      return updatedContent;
    } catch (error) {
      this.log(`‚ö†Ô∏è Erro ao atualizar logo no conte√∫do: ${error instanceof Error ? error.message : String(error)}`);
      return htmlContent; // Retorna conte√∫do original em caso de erro
    }
  }

  /**
   * M√©todo para envio direto de email - exposto para testes de diagn√≥stico
   * @param params Par√¢metros do email {to, subject, html, text}
   * @returns Promise<{success: boolean, messageId?: string, error?: string}>
   */
  public async sendDirectEmail(params: {
    to: string;
    subject: string;
    html: string;
    text?: string;
  }): Promise<{success: boolean, messageId?: string, error?: string}> {
    try {
      if (!this.initialized) {
        this.log('‚ùå Servi√ßo n√£o inicializado para envio direto');
        return { success: false, error: 'Servi√ßo n√£o inicializado' };
      }
      
      // Preparar destinat√°rio
      const to = [{ email: params.to, name: params.to.split('@')[0] }];
      
      // Usar remetente padr√£o para envios diretos
      const sender = DEFAULT_SENDER;
      
      // Conte√∫do em texto plano (opcional)
      const textContent = params.text || params.html
        .replace(/<[^>]*>/g, '')
        .replace(/\s+/g, ' ')
        .trim();
      
      this.log(`üìß [ENVIO DIRETO] Enviando email para ${params.to} com assunto: ${params.subject}`);
      
      // Enviar usando o m√©todo interno
      return await this.sendBrevoEmail(
        sender,
        to,
        params.subject,
        params.html,
        textContent
      );
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.log(`‚ùå [ENVIO DIRETO] Erro ao enviar email: ${errorMessage}`);
      return { success: false, error: errorMessage };
    }
  }
  
  /**
   * M√©todo utilit√°rio para enviar e-mail - usado internamente por outros m√©todos especializados
   * @param sender O remetente do e-mail (suporte ou contato)
   * @param to Array com destinat√°rios (email e nome)
   * @param subject Assunto do e-mail
   * @param htmlContent Conte√∫do HTML do e-mail
   * @param textContent Conte√∫do em texto puro (opcional)
   * @returns Promise<{success: boolean, messageId?: string, error?: string}>
   * @private
   */
  private async sendBrevoEmail(
    sender: typeof SENDERS.suporte | typeof SENDERS.contato,
    to: Array<{ email: string; name?: string }>,
    subject: string,
    htmlContent: string,
    textContent?: string
  ): Promise<{success: boolean, messageId?: string, error?: string}> {
    try {
      if (!this.initialized) {
        this.log('‚ùå Servi√ßo n√£o inicializado');
        return { success: false, error: 'Servi√ßo de email n√£o inicializado' };
      }

      // Converter HTML para texto simples para clientes sem suporte a HTML
      // Remover qualquer c√≥digo de HTML e preservar o texto puro
      let finalTextContent = textContent;
      if (!finalTextContent) {
        finalTextContent = htmlContent
          .replace(/<[^>]*>/g, '')
          .replace(/\s+/g, ' ')
          .trim();
      }
        
      // Garantir que o link de redefini√ß√£o permane√ßa intacto no texto
      if (to[0]?.email && subject.includes('Redefini√ß√£o de Senha')) {
        // Tentar extrair o link de resetUrl do conte√∫do HTML
        const resetUrlMatch = htmlContent.match(/href="([^"]+)"/);
        if (resetUrlMatch && resetUrlMatch[1]) {
          finalTextContent += "\n\nLink direto para redefini√ß√£o de senha: " + resetUrlMatch[1];
        }
      }
      
      // Incluir messageId personalizado para rastreamento
      const customMessageId = `design-auto-${Date.now()}-${createHash('md5').update(to[0].email + subject).digest('hex').substring(0, 8)}`;
      
      const payload = {
        sender: {
          name: sender.name,
          email: sender.email
        },
        to,
        subject,
        htmlContent,
        textContent: finalTextContent || '',
        headers: {
          'X-Custom-MessageId': customMessageId,
          'X-App-Name': 'DesignAuto',
          'X-Environment': process.env.NODE_ENV || 'development'
        }
      };

      // Verifica se est√° em modo de desenvolvimento para simula√ß√£o
      if (DEV_MODE || (global as any).forceDevMode) {
        // Simula um envio bem-sucedido
        this.log(`üß™ [DEV MODE] Simulando envio de email de ${sender.email} para ${to.map(t => t.email).join(', ')}`);
        this.log(`üß™ [DEV MODE] Assunto: ${subject}`);
        
        // Utilizando fun√ß√£o de data importada no topo do arquivo
        // para timezone do Brasil 
        
        // Armazena o email simulado com data no timezone do Brasil
        const simulatedEmail: SimulatedEmail = {
          from: sender.email,
          to: to[0].email, // Simplifica para o primeiro destinat√°rio
          subject,
          html: htmlContent,
          text: finalTextContent || '', // Usando o texto final processado
          sentAt: getBrazilDateTime() // Data atual no fuso hor√°rio do Brasil
        };
        
        this.simulatedEmails.push(simulatedEmail);
        
        // Gera um ID de mensagem simulado
        const simulatedMessageId = `sim-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
        this.log(`üß™ [DEV MODE] Email simulado com sucesso! ID: ${simulatedMessageId}`);
        
        // Mostrar link de redefini√ß√£o em logs de desenvolvimento
        if (subject.includes('Redefini√ß√£o de Senha')) {
          const resetUrlMatch = htmlContent.match(/href="([^"]+)"/);
          if (resetUrlMatch && resetUrlMatch[1]) {
            this.log(`üîó [DEV MODE] Link de redefini√ß√£o: ${resetUrlMatch[1]}`);
          }
        }
        
        return { success: true, messageId: simulatedMessageId };
      }
      
      // Em modo de produ√ß√£o, faz a chamada real para a API do Brevo
      // Log detalhado para depura√ß√£o da API do Brevo
      this.log(`üì§ Enviando e-mail real via Brevo API para ${to.map(t => t.email).join(', ')}`);
      
      // Verificar se temos a chave da API
      if (!BREVO_API_KEY) {
        this.log('‚ùå ERRO CR√çTICO: BREVO_API_KEY n√£o configurada!');
        return { success: false, error: 'Chave de API Brevo n√£o configurada' };
      }
      
      // Validar o formato do email antes de enviar
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      for (const recipient of to) {
        if (!emailRegex.test(recipient.email)) {
          this.log(`‚ö†Ô∏è Endere√ßo de email inv√°lido: ${recipient.email}`);
          return { success: false, error: `Endere√ßo de email inv√°lido: ${recipient.email}` };
        }
      }
      
      // Registrar comprimento da chave da API para diagn√≥stico (sem revelar a chave)
      this.log(`üîë Usando chave Brevo API com ${BREVO_API_KEY.length} caracteres`);
      
      // Log completo do payload sem dados sens√≠veis para diagn√≥stico
      const debugPayload = { ...payload };
      if (debugPayload.sender) debugPayload.sender = { ...payload.sender };
      this.log(`üìß Detalhes do email: ${JSON.stringify(debugPayload)}`);
      
      const response = await fetch(`${BREVO_API_URL}/smtp/email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'api-key': BREVO_API_KEY
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        try {
          const errorData = await response.json();
          throw new Error(`API do Brevo retornou erro: ${JSON.stringify(errorData)}`);
        } catch (parseError) {
          throw new Error(`API do Brevo retornou erro: ${response.status} ${response.statusText}`);
        }
      }

      // Garantir que o retorno tem a estrutura correta
      const responseData = await response.json();
      const messageId = typeof responseData === 'object' && responseData !== null && 'messageId' in responseData
        ? String(responseData.messageId)
        : `response-${Date.now()}`;
      
      return { success: true, messageId };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.log(`‚ùå Erro ao enviar e-mail: ${errorMessage}`);
      return { success: false, error: errorMessage };
    }
  }
  
  /**
   * Retorna os emails simulados (apenas para modo de desenvolvimento)
   * @returns Array<SimulatedEmail> Lista de emails simulados
   */
  public getSimulatedEmails(): SimulatedEmail[] {
    if (!DEV_MODE && !(global as any).forceDevMode) {
      this.log('‚ö†Ô∏è getSimulatedEmails s√≥ est√° dispon√≠vel em modo de desenvolvimento');
      return [];
    }
    return [...this.simulatedEmails];
  }
  
  /**
   * Limpa os emails simulados (apenas para modo de desenvolvimento)
   */
  public clearSimulatedEmails(): void {
    if (!DEV_MODE && !(global as any).forceDevMode) {
      this.log('‚ö†Ô∏è clearSimulatedEmails s√≥ est√° dispon√≠vel em modo de desenvolvimento');
      return;
    }
    this.simulatedEmails = [];
    this.log('üßπ Emails simulados limpos com sucesso');
  }

  /**
   * Envia um e-mail de verifica√ß√£o com c√≥digo usando o remetente de suporte
   * @param email Email do destinat√°rio
   * @param name Nome do destinat√°rio
   * @param verificationCode C√≥digo de verifica√ß√£o
   * @returns Promise<{success: boolean}> Indica se o envio foi bem-sucedido
   */
  public async sendEmailVerification(email: string, verificationCode: string): Promise<{success: boolean}> {
    // Validar email antes de continuar
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email || !emailRegex.test(email)) {
      this.log(`‚ùå Endere√ßo de email inv√°lido para verifica√ß√£o: ${email}`);
      return { success: false };
    }
    
    // Extrair nome do email para fallback
    const name = email.split('@')[0];
    try {
      this.log(`üìß Preparando e-mail de verifica√ß√£o para ${email} usando remetente de suporte`);
      
      // Gerar um ID √∫nico para rastreamento da solicita√ß√£o de verifica√ß√£o
      const requestId = createHash('md5').update(`${email}-${Date.now()}`).digest('hex').substring(0, 8);
      
      const htmlContent = `
        <html>
          <body style="font-family: Arial, Helvetica, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto;">
            <div style="background-color: #f8f8f8; padding: 20px; text-align: center; border-bottom: 3px solid #4285f4;">
              <h2 style="color: #4285f4; margin: 0; font-size: 24px; font-weight: bold;">DESIGN AUTO</h2>
              <p style="color: #666; margin: 5px 0 0 0; font-size: 12px;">Artes Automotivas Profissionais</p>
            </div>
            
            <div style="padding: 20px;">
              <h1 style="color: #4285f4;">Ol√° ${name},</h1>
              <p>Obrigado por se cadastrar no Design Auto!</p>
              <p>Seu c√≥digo de verifica√ß√£o √©:</p>
              
              <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 24px; padding: 15px; background-color: #f5f5f5; border: 1px solid #e0e0e0; border-radius: 4px; display: inline-block; letter-spacing: 8px; font-weight: bold; color: #333;">${verificationCode}</div>
              </div>
              
              <p>Este c√≥digo expira em 24 horas.</p>
              <p><strong>Importante:</strong> Se voc√™ n√£o solicitou este c√≥digo, por favor ignore este e-mail.</p>
              <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
              <p style="color: #777; font-size: 12px;">Atenciosamente,<br>Equipe Design Auto</p>
              <p style="color: #999; font-size: 11px; text-align: center; margin-top: 20px;">ID da solicita√ß√£o: ${requestId}</p>
            </div>
          </body>
        </html>
      `;
      
      // Usar explicitamente o remetente de suporte para verifica√ß√£o
      const supportSender = SENDERS.suporte;
      const subject = 'Verifique seu e-mail - Design Auto';
      
      const result = await this.sendBrevoEmail(
        supportSender, 
        [{ email, name }], 
        subject, 
        htmlContent
      );
      
      if (result.success) {
        this.log(`‚úÖ E-mail de verifica√ß√£o enviado com sucesso de ${supportSender.email}: ${result.messageId}`);
      } else {
        this.log(`‚ùå Falha ao enviar e-mail de verifica√ß√£o para ${email}`);
      }
      
      return { success: result.success };
    } catch (error) {
      this.log(`‚ùå Erro ao enviar e-mail de verifica√ß√£o para ${email}: ${error instanceof Error ? error.message : String(error)}`);
      return { success: false };
    }
  }

  /**
   * Envia um e-mail de boas-vindas ap√≥s verifica√ß√£o usando remetente do contato oficial
   * @param email Email do destinat√°rio
   * @param name Nome do destinat√°rio
   * @returns Promise<boolean> Indica se o envio foi bem-sucedido
   */
  public async sendWelcomeEmail(email: string, name: string): Promise<boolean> {
    try {
      // Validar email antes de continuar
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email || !emailRegex.test(email)) {
        this.log(`‚ùå Endere√ßo de email inv√°lido para envio de boas-vindas: ${email}`);
        return false;
      }
      
      // Usar o nome do usu√°rio ou extrair do email como fallback
      const userName = name || email.split('@')[0];
      
      this.log(`üìß Preparando e-mail de boas-vindas para ${email} usando remetente de contato`);
      
      const htmlContent = `
        <html>
          <body style="font-family: Arial, Helvetica, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto;">
            <div style="background-color: #f8f8f8; padding: 20px; text-align: center; border-bottom: 3px solid #4285f4;">
              <h2 style="color: #4285f4; margin: 0; font-size: 24px; font-weight: bold;">DESIGN AUTO</h2>
              <p style="color: #666; margin: 5px 0 0 0; font-size: 12px;">Artes Automotivas Profissionais</p>
            </div>
            
            <div style="padding: 20px;">
              <h1 style="color: #4285f4;">Bem-vindo ao Design Auto, ${userName}!</h1>
              
              <p>Sua conta foi verificada com sucesso! üéâ</p>
              
              <div style="padding: 15px; background-color: #f5f5f5; border-radius: 4px; margin: 20px 0;">
                <p><strong>Voc√™ agora tem acesso a:</strong></p>
                <ul style="margin-top: 10px; padding-left: 20px;">
                  <li>Milhares de designs automotivos prontos para edi√ß√£o</li>
                  <li>Todas as artes dispon√≠veis para seu plano</li>
                  <li>Categorias exclusivas de conte√∫do para sua oficina</li>
                </ul>
              </div>
              
              <p>Se tiver qualquer d√∫vida, entre em contato conosco pelo suporte.</p>
              
              <div style="text-align: center; margin: 30px 0;">
                <a href="https://designauto.com.br" style="padding: 12px 24px; background-color: #4285f4; color: white; text-decoration: none; border-radius: 4px; display: inline-block; font-weight: bold;">Acessar Minha Conta</a>
              </div>
              
              <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
              <p style="color: #777; font-size: 12px;">Atenciosamente,<br>Equipe Design Auto</p>
            </div>
          </body>
        </html>
      `;
      
      // Usar o remetente de contato para emails de boas-vindas
      const contactSender = SENDERS.contato;
      const subject = 'Bem-vindo ao Design Auto!';
      
      const result = await this.sendBrevoEmail(
        contactSender, 
        [{ email, name }], 
        subject, 
        htmlContent
      );
      
      if (result.success) {
        this.log(`‚úÖ E-mail de boas-vindas enviado com sucesso de ${contactSender.email}: ${result.messageId}`);
      } else {
        this.log(`‚ùå Falha ao enviar e-mail de boas-vindas para ${email}`);
      }
      
      return result.success;
    } catch (error) {
      this.log(`‚ùå Erro ao enviar e-mail de boas-vindas para ${email}: ${error instanceof Error ? error.message : String(error)}`);
      return false;
    }
  }

  /**
   * Envia um e-mail de redefini√ß√£o de senha usando o remetente de suporte
   * @param email Email do destinat√°rio
   * @param data Dados para o template do email
   * @returns Promise<boolean> Indica se o envio foi bem-sucedido
   */
  public async sendPasswordResetEmail(email: string, data: {userName: string, resetUrl: string}): Promise<boolean> {
    try {
      // Validar email antes de continuar
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email || !emailRegex.test(email)) {
        this.log(`‚ùå Endere√ßo de email inv√°lido para redefini√ß√£o de senha: ${email}`);
        return false;
      }
      
      // Gerar um ID √∫nico para rastreamento da solicita√ß√£o
      const requestId = createHash('md5').update(`${email}-${Date.now()}`).digest('hex').substring(0, 8);
      
      this.log(`üìß [ID:${requestId}] Preparando e-mail de redefini√ß√£o de senha para ${email} usando remetente de suporte`);
      
      // Garantir que temos um nome de usu√°rio v√°lido
      const userName = data.userName || email.split('@')[0];
      
      // Verificar o URL de redefini√ß√£o
      if (!data.resetUrl || !data.resetUrl.includes('token=')) {
        this.log(`‚ùå [ID:${requestId}] URL de redefini√ß√£o inv√°lido: ${data.resetUrl}`);
        return false;
      }
      
      // Adicionar par√¢metro de rastreamento ao URL para debug
      const resetUrlWithTracking = `${data.resetUrl}&_debugid=${requestId}`;
      
      // Detec√ß√£o e formata√ß√£o de URL para diferentes provedores de email
      // URLs mais limpos e compat√≠veis com clientes de email
      const resetLink = resetUrlWithTracking.replace(/\s+/g, '');
      
      const htmlContent = `
        <html>
          <body style="font-family: Arial, Helvetica, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto;">
            <div style="background-color: #f8f8f8; padding: 20px; text-align: center; border-bottom: 3px solid #4285f4;">
              <h2 style="color: #4285f4; margin: 0; font-size: 24px; font-weight: bold;">DESIGN AUTO</h2>
              <p style="color: #666; margin: 5px 0 0 0; font-size: 12px;">Artes Automotivas Profissionais</p>
            </div>
            
            <div style="padding: 20px;">
              <h1 style="color: #4285f4;">Ol√° ${userName},</h1>
              <p>Recebemos uma solicita√ß√£o para redefinir sua senha.</p>
              <p>Clique no bot√£o abaixo para criar uma nova senha:</p>
              <!-- Link direto com ID de rastreamento para diagn√≥stico -->
              <div style="text-align: center; margin: 30px 0;">
                <a href="${resetLink}" style="padding: 12px 24px; background-color: #4285f4; color: white; text-decoration: none; border-radius: 4px; display: inline-block; font-weight: bold;">Redefinir Senha</a>
              </div>
              <p>Se o bot√£o acima n√£o funcionar, copie e cole o link a seguir no seu navegador:</p>
              <p style="word-break: break-all; font-family: monospace; background-color: #f5f5f5; padding: 10px; border-radius: 4px; font-size: 12px;">${resetLink}</p>
              <p>Este link expira em 1 hora.</p>
              <p><strong>Importante:</strong> Se voc√™ n√£o solicitou esta mudan√ßa, por favor ignore este e-mail.</p>
              <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
              <p style="color: #777; font-size: 12px;">Atenciosamente,<br>Equipe Design Auto</p>
            </div>
          </body>
        </html>
      `;
      
      // Criar vers√£o em texto plano expl√≠cita para garantir que os links funcionem
      const textContent = `
Ol√° ${userName},

Recebemos uma solicita√ß√£o para redefinir sua senha.

Para criar uma nova senha, acesse o link abaixo:
${resetLink}

Este link expira em 1 hora.

Se voc√™ n√£o solicitou esta mudan√ßa, por favor ignore este e-mail.

Atenciosamente,
Equipe Design Auto
      `;
      
      // Usar explicitamente o remetente de suporte para senhas
      const supportSender = SENDERS.suporte;
      const subject = 'Redefini√ß√£o de Senha - Design Auto';
      
      this.log(`üìß [ID:${requestId}] Enviando e-mail para ${email} com URL de redefini√ß√£o`);
      
      const result = await this.sendBrevoEmail(
        supportSender, 
        [{ email, name: data.userName }], 
        subject, 
        htmlContent,
        textContent
      );
      
      if (result.success) {
        this.log(`‚úÖ [ID:${requestId}] E-mail de redefini√ß√£o de senha enviado com sucesso de ${supportSender.email}: ${result.messageId}`);
        // Registrar o URL de redefini√ß√£o no log para diagn√≥stico
        this.log(`üîó [ID:${requestId}] URL de redefini√ß√£o: ${resetUrlWithTracking}`);
      } else {
        this.log(`‚ùå [ID:${requestId}] Falha ao enviar e-mail de redefini√ß√£o de senha para ${email}`);
      }
      
      return result.success;
    } catch (error) {
      this.log(`‚ùå Erro ao enviar e-mail de redefini√ß√£o de senha para ${email}: ${error instanceof Error ? error.message : String(error)}`);
      return false;
    }
  }
  
  /**
   * Envia um e-mail de confirma√ß√£o de altera√ß√£o de senha
   * @param email Email do destinat√°rio
   * @param data Dados para o template do email
   * @returns Promise<boolean> Indica se o envio foi bem-sucedido
   */
  public async sendPasswordChangeConfirmationEmail(email: string, data: {userName: string}): Promise<boolean> {
    try {
      // Validar email antes de continuar
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email || !emailRegex.test(email)) {
        this.log(`‚ùå Endere√ßo de email inv√°lido para confirma√ß√£o de altera√ß√£o: ${email}`);
        return false;
      }
      
      // Garantir que temos um nome de usu√°rio v√°lido
      const userName = data.userName || email.split('@')[0];
      
      // Gerar um ID √∫nico para rastreamento da solicita√ß√£o
      const requestId = createHash('md5').update(`${email}-${Date.now()}`).digest('hex').substring(0, 8);
      
      this.log(`üìß [ID:${requestId}] Preparando e-mail de confirma√ß√£o de altera√ß√£o de senha para ${email}`);
      
      const htmlContent = `
        <html>
          <body style="font-family: Arial, Helvetica, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto;">
            <div style="background-color: #f8f8f8; padding: 20px; text-align: center; border-bottom: 3px solid #4285f4;">
              <h2 style="color: #4285f4; margin: 0; font-size: 24px; font-weight: bold;">DESIGN AUTO</h2>
              <p style="color: #666; margin: 5px 0 0 0; font-size: 12px;">Artes Automotivas Profissionais</p>
            </div>
            
            <div style="padding: 20px;">
              <h1 style="color: #4285f4;">Ol√° ${userName},</h1>
              
              <p><strong>Sua senha foi alterada com sucesso.</strong></p>
              
              <div style="margin: 20px 0; padding: 15px; background-color: #f5f5f5; border-left: 4px solid #4285f4; border-radius: 4px;">
                <p>Se voc√™ n√£o realizou esta altera√ß√£o, entre em contato <strong>imediatamente</strong> com nosso suporte.</p>
              </div>
              
              <p>Esta √© uma notifica√ß√£o de seguran√ßa para garantir que apenas voc√™ tenha acesso √† sua conta.</p>
              
              <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
              <p style="color: #777; font-size: 12px;">Atenciosamente,<br>Equipe de Seguran√ßa<br>Design Auto</p>
              <p style="color: #999; font-size: 11px; text-align: center; margin-top: 20px;">ID da notifica√ß√£o: ${requestId}</p>
            </div>
          </body>
        </html>
      `;
      
      // Vers√£o em texto simples para clientes de email sem suporte a HTML
      const textContent = `
Ol√° ${userName},

Sua senha foi alterada com sucesso.

IMPORTANTE: Se voc√™ n√£o realizou esta altera√ß√£o, entre em contato imediatamente com nosso suporte.

Esta √© uma notifica√ß√£o de seguran√ßa para garantir que apenas voc√™ tenha acesso √† sua conta.

Atenciosamente,
Equipe de Seguran√ßa
Design Auto

ID da notifica√ß√£o: ${requestId}
      `;
      
      // Usar remetente de suporte para notifica√ß√µes de seguran√ßa
      const supportSender = SENDERS.suporte;
      const subject = 'Confirma√ß√£o de Altera√ß√£o de Senha - Design Auto';
      
      const result = await this.sendBrevoEmail(
        supportSender, 
        [{ email, name: userName }], 
        subject, 
        htmlContent,
        textContent
      );
      
      if (result.success) {
        this.log(`‚úÖ E-mail de confirma√ß√£o de altera√ß√£o de senha enviado com sucesso de ${supportSender.email}: ${result.messageId}`);
      } else {
        this.log(`‚ùå Falha ao enviar e-mail de confirma√ß√£o de altera√ß√£o de senha para ${email}`);
      }
      
      return result.success;
    } catch (error) {
      this.log(`‚ùå Erro ao enviar e-mail de confirma√ß√£o de altera√ß√£o de senha para ${email}: ${error instanceof Error ? error.message : String(error)}`);
      return false;
    }
  }

  /**
   * M√©todo p√∫blico para envio de e-mail gen√©rico
   * @param sender Objeto com informa√ß√µes do remetente {name, email}
   * @param recipients Array de destinat√°rios [{email, name}]
   * @param subject Assunto do e-mail
   * @param htmlContent Conte√∫do HTML do e-mail
   * @param textContent Conte√∫do em texto plano (opcional)
   * @returns Promise<{success: boolean, messageId?: string, error?: string}>
   */
  public async sendEmail(
    sender: { name: string; email: string },
    recipients: { email: string; name: string }[],
    subject: string,
    htmlContent: string,
    textContent?: string
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    try {
      return await this.sendBrevoEmail(sender, recipients, subject, htmlContent, textContent);
    } catch (error) {
      this.log(`‚ùå Erro no m√©todo sendEmail: ${error instanceof Error ? error.message : String(error)}`);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }
}

// Inst√¢ncia √∫nica para o servi√ßo de e-mail
export const emailService = new EmailService();
export { EmailService };