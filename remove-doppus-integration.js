/**
 * Script para remover completamente toda a integra√ß√£o com Doppus
 * Remove todas as configura√ß√µes, tabelas e refer√™ncias relacionadas √† Doppus
 */

import pkg from 'pg';
const { Pool } = pkg;

async function removeDoppusIntegration() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    console.log('üßπ Iniciando remo√ß√£o completa da integra√ß√£o Doppus...');

    // 1. Remover tabela doppusProductMappings
    try {
      await pool.query('DROP TABLE IF EXISTS "doppusProductMappings" CASCADE');
      console.log('‚úÖ Tabela doppusProductMappings removida');
    } catch (error) {
      console.log('‚ö†Ô∏è Tabela doppusProductMappings n√£o encontrada');
    }

    // 2. Remover configura√ß√µes da Doppus na tabela integrationSettings
    try {
      const result = await pool.query(`
        DELETE FROM "integrationSettings" 
        WHERE "provider" = 'doppus'
      `);
      console.log(`‚úÖ ${result.rowCount} configura√ß√µes da Doppus removidas da tabela integrationSettings`);
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel remover configura√ß√µes da integrationSettings:', error.message);
    }

    // 3. Remover colunas relacionadas √† Doppus da tabela subscriptionSettings
    const doppusColumns = ['doppusClientId', 'doppusClientSecret', 'doppusSecretKey', 'doppusApiKey'];
    
    for (const column of doppusColumns) {
      try {
        await pool.query(`ALTER TABLE "subscriptionSettings" DROP COLUMN IF EXISTS "${column}"`);
        console.log(`‚úÖ Coluna ${column} removida da tabela subscriptionSettings`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Coluna ${column} n√£o encontrada ou erro ao remover:`, error.message);
      }
    }

    // 4. Atualizar usu√°rios que tinham origem de assinatura 'doppus' para 'manual'
    try {
      const result = await pool.query(`
        UPDATE "users" 
        SET "origemassinatura" = 'manual'
        WHERE "origemassinatura" = 'doppus'
      `);
      console.log(`‚úÖ ${result.rowCount} usu√°rios atualizados de origem 'doppus' para 'manual'`);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao atualizar usu√°rios:', error.message);
    }

    // 5. Remover webhooks da Doppus
    try {
      const result = await pool.query(`
        DELETE FROM "webhookLogs" 
        WHERE "source" = 'doppus'
      `);
      console.log(`‚úÖ ${result.rowCount} logs de webhook da Doppus removidos`);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao remover logs de webhook da Doppus:', error.message);
    }

    console.log('üéâ Remo√ß√£o completa da integra√ß√£o Doppus finalizada!');
    console.log('');
    console.log('üìã Resumo das a√ß√µes realizadas:');
    console.log('- Tabela doppusProductMappings removida');
    console.log('- Configura√ß√µes da Doppus removidas da integrationSettings');
    console.log('- Colunas da Doppus removidas da subscriptionSettings');
    console.log('- Usu√°rios com origem Doppus migrados para manual');
    console.log('- Logs de webhook da Doppus removidos');

  } catch (error) {
    console.error('‚ùå Erro durante a remo√ß√£o da integra√ß√£o Doppus:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

// Executar o script
removeDoppusIntegration()
  .then(() => {
    console.log('‚úÖ Script conclu√≠do com sucesso');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script falhou:', error);
    process.exit(1);
  });