import React, { useState, useEffect } from 'react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useQuery, useMutation } from '@tanstack/react-query';
import { z } from 'zod';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';
import { 
  Loader2, Upload, Image, X, Check, AlertCircle, 
  Settings2, FileImage, FolderOpen, FileType, LayoutGrid,
  BadgePlus, Link2, PenLine, UploadCloud, BookImage
} from 'lucide-react';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

// Esquema de formulário com validação
const formSchema = z.object({
  categoryId: z.string().min(1, "Por favor selecione uma categoria"),
  globalFileType: z.string().min(1, "Por favor selecione um tipo de arquivo"),
  isPremium: z.boolean().default(false),
  formats: z.array(
    z.object({
      format: z.string().min(1, "Formato é obrigatório"),
      fileType: z.string().min(1, "Tipo de arquivo é obrigatório"),
      title: z.string().min(3, "Título deve ter pelo menos 3 caracteres"),
      description: z.string().optional(),
      imageUrl: z.string().min(5, "URL da imagem é obrigatória"),
      previewUrl: z.string().optional(),
      editUrl: z.string().min(5, "URL de edição é obrigatória"),
    })
  ).min(1, "Adicione pelo menos um formato")
});

type FormValues = z.infer<typeof formSchema>;

export default function AddArtFormMulti() {
  const { toast } = useToast();
  const { user } = useAuth();
  const [images, setImages] = useState<Record<string, string>>({});
  const [previewImages, setPreviewImages] = useState<Record<string, string>>({});
  const [uploading, setUploading] = useState<Record<string, boolean>>({});
  const [uploadError, setUploadError] = useState<Record<string, string>>({});

  // Estado para controlar os formatos selecionados
  const [selectedFormats, setSelectedFormats] = useState<string[]>([]);

  // Consultas para obter dados
  const { data: categories = [], isLoading: isLoadingCategories } = useQuery({
    queryKey: ['/api/categories'],
  });

  const { data: formats = [], isLoading: isLoadingFormats } = useQuery({
    queryKey: ['/api/formats'],
  });

  const { data: fileTypes = [], isLoading: isLoadingFileTypes } = useQuery({
    queryKey: ['/api/fileTypes'],
  });

  // Configuração do formulário
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      categoryId: '',
      globalFileType: 'canva', // "canva" como tipo de arquivo padrão
      isPremium: true, // Arte premium sempre selecionada por padrão
      formats: []
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'formats',
  });

  // Efeito para sincronizar os formatos selecionados com o formulário
  useEffect(() => {
    // Remover formatos que foram desmarcados
    const currentFormats = form.getValues().formats || [];
    const formatsToKeep = currentFormats.filter(f => selectedFormats.includes(f.format));
    
    // Adicionar novos formatos
    selectedFormats.forEach(formatSlug => {
      const exists = formatsToKeep.some(f => f.format === formatSlug);
      if (!exists) {
        // Obter o tipo de arquivo global, ou usar 'canva' como padrão
        const globalFileType = form.getValues().globalFileType || 'canva';
        
        formatsToKeep.push({
          format: formatSlug,
          fileType: globalFileType, // Usar o tipo de arquivo global definido no início
          title: '',
          description: '',
          imageUrl: '',
          previewUrl: '', // Será ignorado, mas mantemos para compatibilidade
          editUrl: '',
        });
      }
    });
    
    // Atualizar o formulário
    form.setValue('formats', formatsToKeep);
  }, [selectedFormats, form]);

  // Manipuladores para seleção de formatos
  const toggleFormat = (formatSlug: string) => {
    setSelectedFormats(prev => {
      if (prev.includes(formatSlug)) {
        // Se já estiver selecionado, remova
        return prev.filter(slug => slug !== formatSlug);
      } else {
        // Se não estiver selecionado, adicione
        return [...prev, formatSlug];
      }
    });
  };

  // Manipuladores para upload de imagens
  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>, formatSlug: string, isPreview: boolean = false) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const identifier = isPreview ? `preview-${formatSlug}` : `main-${formatSlug}`;
    setUploading({ ...uploading, [identifier]: true });
    setUploadError({ ...uploadError, [identifier]: '' });

    try {
      // Garantir que a categoria foi selecionada
      const categoryId = form.getValues('categoryId');
      if (!categoryId) {
        throw new Error("Selecione uma categoria antes de fazer upload de imagens");
      }

      // Encontrar o nome da categoria para uso na pasta
      const category = categories.find((cat: any) => cat.id.toString() === categoryId);
      if (!category) {
        throw new Error("Categoria não encontrada");
      }

      // Criar FormData para upload
      const formData = new FormData();
      formData.append('image', file);
      formData.append('category', category.slug || 'default');
      
      // Adicionar informações do designer (usuário logado)
      if (user && user.id) {
        formData.append('designerId', user.id.toString());
      }

      // Fazer upload da imagem com feedback detalhado no console
      console.log(`Iniciando upload para formato: ${formatSlug}, isPreview: ${isPreview}`);
      console.log(`Dados do FormData: categoria=${category.slug}, designerId=${user?.id}`);
      
      const response = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error(`Erro no upload: ${JSON.stringify(errorData)}`);
        throw new Error(errorData.message || errorData.error || 'Falha ao fazer upload da imagem');
      }

      const result = await response.json();
      console.log(`Upload concluído com sucesso: ${JSON.stringify(result)}`);

      // Atualizar estado com a URL da imagem
      const index = form.getValues().formats.findIndex(f => f.format === formatSlug);
      if (index === -1) {
        throw new Error("Formato não encontrado no formulário");
      }

      if (isPreview) {
        setPreviewImages({ ...previewImages, [formatSlug]: result.imageUrl });
        form.setValue(`formats.${index}.previewUrl`, result.imageUrl);
      } else {
        setImages({ ...images, [formatSlug]: result.imageUrl });
        form.setValue(`formats.${index}.imageUrl`, result.imageUrl);
      }

      toast({
        title: "Upload concluído",
        description: "A imagem foi carregada com sucesso.",
      });
    } catch (error) {
      console.error('Erro ao fazer upload:', error);
      const errorMessage = error instanceof Error ? error.message : "Falha ao carregar a imagem";
      setUploadError({ ...uploadError, [identifier]: errorMessage });
      toast({
        title: "Erro no upload",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setUploading({ ...uploading, [identifier]: false });
    }
  };

  // Mutação para salvar a arte
  const submitMutation = useMutation({
    mutationFn: async (data: FormValues) => {
      // Converter IDs para números e formatar dados
      const formattedData = {
        categoryId: parseInt(data.categoryId),
        isPremium: data.isPremium,
        globalFileType: data.globalFileType,
        formats: data.formats.map(format => ({
          ...format,
          previewUrl: format.previewUrl || null,
        })),
      };

      const response = await apiRequest('POST', '/api/admin/arts/multi', formattedData);
      return await response.json();
    },
    onSuccess: () => {
      toast({
        title: "Arte salva com sucesso",
        description: "A arte com múltiplos formatos foi criada.",
      });
      form.reset({
        categoryId: '',
        globalFileType: 'canva', // Mantém "canva" como tipo de arquivo padrão
        isPremium: true, // Mantém como true após o reset
        formats: []
      });
      setImages({});
      setPreviewImages({});
      setSelectedFormats([]);
      queryClient.invalidateQueries({ queryKey: ['/api/arts'] });
    },
    onError: (error: any) => {
      toast({
        title: "Erro ao salvar",
        description: error.message || "Não foi possível salvar a arte. Verifique os dados e tente novamente.",
        variant: "destructive",
      });
    },
  });

  // Manipulador de envio do formulário
  const onSubmit = (data: FormValues) => {
    submitMutation.mutate(data);
  };

  // Estado de carregamento
  const isLoading = isLoadingCategories || isLoadingFormats || isLoadingFileTypes;

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-8 h-8 animate-spin text-primary" />
      </div>
    );
  }

  // Função para renderizar cada formato
  const renderFormatBlock = (formatSlug: string) => {
    // Encontrar o formato nos dados do formulário
    const formatIndex = form.getValues().formats.findIndex(f => f.format === formatSlug);
    if (formatIndex === -1) return null;
    
    // Encontrar informações do formato na lista de formatos
    const formatInfo = formats.find((f: any) => f.slug === formatSlug);
    const formatName = formatInfo ? formatInfo.name : formatSlug;

    return (
      <div key={formatSlug} className="mt-6 border border-blue-100 rounded-xl overflow-hidden shadow-sm bg-white">
        <div className="bg-gradient-to-r from-blue-50 to-blue-100 px-5 py-3 flex justify-between items-center">
          <h3 className="text-lg font-semibold text-blue-800 flex items-center">
            <BookImage className="h-5 w-5 mr-2 text-blue-600" />
            {formatName}
          </h3>
          <Button 
            variant="outline" 
            size="icon" 
            onClick={() => toggleFormat(formatSlug)}
            className="h-8 w-8 bg-white hover:bg-red-50 hover:text-red-600 border-gray-200"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
        <div className="p-5">
          <div className="grid md:grid-cols-2 gap-6 mb-5">
            <div className="space-y-3">
              <Label htmlFor={`formats.${formatIndex}.title`} className="flex items-center text-sm font-medium">
                <PenLine className="h-4 w-4 mr-1.5 text-blue-600" />
                Título <span className="text-red-500 ml-1">*</span>
              </Label>
              <Input
                {...form.register(`formats.${formatIndex}.title`)}
                placeholder="Título da arte"
                className="bg-blue-50/40 border-blue-100 focus:border-blue-300 focus:ring-blue-200"
              />
              {form.formState.errors.formats?.[formatIndex]?.title && (
                <p className="text-sm text-red-500 mt-1">
                  {form.formState.errors.formats?.[formatIndex]?.title?.message}
                </p>
              )}
            </div>
            
            <div className="space-y-3">
              <Label htmlFor={`formats.${formatIndex}.editUrl`} className="flex items-center text-sm font-medium">
                <Link2 className="h-4 w-4 mr-1.5 text-blue-600" />
                Link de Edição <span className="text-red-500 ml-1">*</span>
              </Label>
              <Input
                {...form.register(`formats.${formatIndex}.editUrl`)}
                placeholder="URL para edição (Canva, Google Drive, etc)"
                className="bg-blue-50/40 border-blue-100 focus:border-blue-300 focus:ring-blue-200"
              />
              {form.formState.errors.formats?.[formatIndex]?.editUrl && (
                <p className="text-sm text-red-500 mt-1">
                  {form.formState.errors.formats?.[formatIndex]?.editUrl?.message}
                </p>
              )}
            </div>
          </div>
          
          {/* Campo oculto para fileType (valor definido globalmente) */}
          <input 
            type="hidden" 
            {...form.register(`formats.${formatIndex}.fileType`)}
          />

          <div className="space-y-3 mb-5">
            <Label htmlFor={`formats.${formatIndex}.description`} className="flex items-center text-sm font-medium">
              <FileType className="h-4 w-4 mr-1.5 text-blue-600" />
              Descrição <span className="text-gray-400 text-xs ml-1">(opcional)</span>
            </Label>
            <Textarea
              {...form.register(`formats.${formatIndex}.description`)}
              placeholder="Breve descrição desta arte (opcional)"
              rows={2}
              className="bg-blue-50/40 border-blue-100 focus:border-blue-300 focus:ring-blue-200 text-sm"
            />
          </div>

        <div className="grid md:grid-cols-2 gap-4">
          {/* Upload de imagem principal */}
          <div className="space-y-2">
            <Label htmlFor={`formats.${formatIndex}.image`} className="flex items-center text-sm font-medium">
              <UploadCloud className="h-4 w-4 mr-1.5 text-blue-600" /> 
              Imagem Principal <span className="text-red-500 ml-1">*</span>
            </Label>
            <div className="flex items-center space-x-2">
              <div 
                className={`relative border-2 border-dashed rounded-lg p-4 flex flex-col items-center justify-center w-full h-36 ${
                  uploading[`main-${formatSlug}`] 
                    ? 'border-blue-300 bg-blue-50' 
                    : uploadError[`main-${formatSlug}`] 
                      ? 'border-red-300 bg-red-50'
                      : 'border-blue-100 hover:border-blue-300 bg-blue-50/30 hover:bg-blue-50/50'
                }`}
              >
                {images[formatSlug] ? (
                  <div className="relative w-full h-full">
                    <img 
                      src={images[formatSlug]} 
                      alt="Imagem carregada" 
                      className="h-full mx-auto object-contain cursor-pointer"
                    />
                    {/* Ícone de sucesso */}
                    <div className="absolute bottom-0 right-0 bg-green-500 text-white p-1 rounded-full">
                      <Check className="h-4 w-4" />
                    </div>
                  </div>
                ) : (
                  <div className="text-center">
                    {uploading[`main-${formatSlug}`] ? (
                      <>
                        <Loader2 className="h-8 w-8 mx-auto animate-spin text-blue-500" />
                        <p className="text-sm text-blue-500 mt-2">Enviando...</p>
                      </>
                    ) : uploadError[`main-${formatSlug}`] ? (
                      <>
                        <AlertCircle className="h-8 w-8 mx-auto text-red-500" />
                        <p className="text-sm text-red-500 mt-2">Erro no upload</p>
                      </>
                    ) : (
                      <>
                        <Upload className="h-8 w-8 mx-auto text-blue-400" />
                        <p className="text-sm text-blue-500 mt-2">Clique para fazer upload</p>
                      </>
                    )}
                  </div>
                )}
                <input
                  type="file"
                  id={`formats.${formatIndex}.image`}
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  onChange={(e) => handleImageChange(e, formatSlug)}
                  disabled={uploading[`main-${formatSlug}`]}
                  accept="image/*"
                />
                <input 
                  type="hidden" 
                  {...form.register(`formats.${formatIndex}.imageUrl`)}
                  value={images[formatSlug] || ''}
                />
              </div>
            </div>
            {form.formState.errors.formats?.[formatIndex]?.imageUrl && (
              <p className="text-sm text-red-500 mt-1">
                {form.formState.errors.formats?.[formatIndex]?.imageUrl?.message}
              </p>
            )}
          </div>

          {/* Campo oculto para previewUrl (mantido apenas por compatibilidade) */}
          <input 
            type="hidden" 
            {...form.register(`formats.${formatIndex}.previewUrl`)}
            value=""
          />
        </div>
      </div>
    );
  };

  return (
    <div className="container mx-auto p-4 max-w-5xl">
      <Card className="border-0 shadow-lg overflow-hidden">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-blue-800 text-white pb-8">
          <div className="flex items-center mb-2">
            <FileImage className="h-6 w-6 mr-2" />
            <CardTitle>Adicionar Arte Multi-Formato</CardTitle>
          </div>
          <CardDescription className="text-blue-100">
            Crie uma arte com variações para diferentes formatos (feed, stories, etc.)
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6 px-6">
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            {/* Seção de configuração global */}
            <div className="bg-blue-50/60 p-6 rounded-xl border border-blue-100">
              <h3 className="text-lg font-semibold text-blue-800 mb-4 flex items-center">
                <Settings2 className="h-5 w-5 mr-2 text-blue-600" />
                Configuração Global
              </h3>
              
              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-5">
                  <div className="space-y-3">
                    <Label htmlFor="category" className="text-sm font-medium flex items-center">
                      <FolderOpen className="h-4 w-4 mr-1.5 text-blue-600" />
                      Categoria <span className="text-red-500 ml-1">*</span>
                    </Label>
                    <Controller
                      control={form.control}
                      name="categoryId"
                      render={({ field }) => (
                        <Select
                          value={field.value}
                          onValueChange={field.onChange}
                        >
                          <SelectTrigger className="bg-white border-blue-200 focus:ring-blue-500">
                            <SelectValue placeholder="Selecione uma categoria" />
                          </SelectTrigger>
                          <SelectContent>
                            {categories.map((category: any) => (
                              <SelectItem key={category.id} value={category.id.toString()}>
                                {category.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      )}
                    />
                    {form.formState.errors.categoryId && (
                      <p className="text-sm text-red-500 mt-1">
                        {form.formState.errors.categoryId.message}
                      </p>
                    )}
                  </div>
                  
                  <div className="space-y-3">
                    <Label htmlFor="globalFileType" className="text-sm font-medium flex items-center">
                      <FileType className="h-4 w-4 mr-1.5 text-blue-600" />
                      Tipo de Arquivo <span className="text-red-500 ml-1">*</span>
                    </Label>
                    <Controller
                      control={form.control}
                      name="globalFileType"
                      render={({ field }) => (
                        <Select
                          value={field.value}
                          onValueChange={(value) => {
                            field.onChange(value);
                            
                            // Aplicar este tipo para todos os formatos já adicionados
                            const currentFormats = form.getValues().formats || [];
                            if (currentFormats.length > 0) {
                              const updatedFormats = currentFormats.map(format => ({
                                ...format,
                                fileType: value
                              }));
                              form.setValue('formats', updatedFormats);
                            }
                          }}
                        >
                          <SelectTrigger className="bg-white border-blue-200 focus:ring-blue-500">
                            <SelectValue placeholder="Selecione o tipo" />
                          </SelectTrigger>
                          <SelectContent>
                            {fileTypes.map((type: any) => (
                              <SelectItem key={type.id} value={type.slug}>
                                {type.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      )}
                    />
                  </div>
                </div>
                
                <div className="flex flex-col justify-center">
                  <div className="bg-white p-5 rounded-lg border border-blue-100 shadow-sm">
                    <h4 className="text-sm font-medium text-gray-600 mb-3 flex items-center">
                      <BadgePlus className="h-4 w-4 mr-1.5 text-blue-600" />
                      Visibilidade da Arte
                    </h4>
                    <div className="flex items-center space-x-3">
                      <Controller
                        control={form.control}
                        name="isPremium"
                        render={({ field }) => (
                          <Switch
                            checked={field.value}
                            onCheckedChange={field.onChange}
                            id="isPremium"
                            className="data-[state=checked]:bg-blue-600"
                          />
                        )}
                      />
                      <Label htmlFor="isPremium" className="font-medium text-gray-700">Arte Premium</Label>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <Separator className="my-2" />

            {/* Seleção de formatos */}
            <div className="pt-2">
              <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                <LayoutGrid className="h-5 w-5 mr-2 text-blue-600" />
                Formatos<span className="text-red-500 ml-1">*</span>
              </h3>
              <p className="text-sm text-gray-500 mb-5">Selecione um ou mais formatos para sua arte</p>
              
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                {formats.map((format: any) => (
                  <button
                    key={format.id}
                    type="button"
                    onClick={() => toggleFormat(format.slug)}
                    className={`
                      py-3 px-4 rounded-lg font-medium text-center
                      transition-all duration-200 shadow-sm
                      ${selectedFormats.includes(format.slug) 
                        ? 'bg-blue-600 text-white transform scale-105 ring-2 ring-blue-300'
                        : 'bg-white border border-gray-200 text-gray-700 hover:bg-gray-50 hover:border-blue-300'
                      }
                    `}
                  >
                    {format.name}
                  </button>
                ))}
              </div>
            </div>

            {/* Container para blocos de formatos */}
            <div id="blocos-formatos">
              {selectedFormats.map(renderFormatBlock)}
            </div>

            {/* Resumo dos formatos selecionados */}
            {selectedFormats.length > 0 && (
              <div className="mt-6 bg-gray-50 p-4 rounded-lg">
                <h3 className="text-md font-medium mb-2">Formatos selecionados:</h3>
                <div className="flex flex-wrap gap-2">
                  {selectedFormats.map(formatSlug => {
                    const formatInfo = formats.find((f: any) => f.slug === formatSlug);
                    const formatName = formatInfo ? formatInfo.name : formatSlug;
                    
                    // Verificar se os campos obrigatórios estão preenchidos
                    const formatIndex = form.getValues().formats.findIndex(f => f.format === formatSlug);
                    const formatData = form.getValues().formats[formatIndex];
                    const isComplete = formatData && formatData.title && formatData.imageUrl && formatData.editUrl && formatData.fileType;
                    
                    return (
                      <div key={formatSlug} className={`px-3 py-1 rounded-full text-sm flex items-center gap-1 ${
                        isComplete ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {formatName}
                        {isComplete ? (
                          <Check className="h-3 w-3" />
                        ) : (
                          <AlertCircle className="h-3 w-3" />
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>
            )}

            {/* Botão de enviar */}
            {selectedFormats.length > 0 && (
              <div className="flex justify-end mt-8">
                <Button 
                  type="submit"
                  disabled={submitMutation.isPending}
                  className="px-8"
                >
                  {submitMutation.isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  Salvar Arte
                </Button>
              </div>
            )}
          </form>
        </CardContent>
      </Card>
    </div>
  );
}