#!/usr/bin/env node

/**
 * Corre√ß√£o r√°pida para dados do dashboard de assinatura
 * Problema: Mostra 0 usu√°rios com assinatura quando deveria mostrar os dados reais
 */

const fs = require('fs');

// Fun√ß√£o para corrigir as rotas em server/routes.ts
function fixSubscriptionRoutes() {
  console.log('üîß Corrigindo rotas de assinatura...\n');
  
  const routesPath = 'server/routes.ts';
  
  if (!fs.existsSync(routesPath)) {
    console.log('‚ùå Arquivo server/routes.ts n√£o encontrado');
    return false;
  }
  
  // Backup do arquivo atual
  const backupPath = `${routesPath}.backup-${Date.now()}`;
  fs.copyFileSync(routesPath, backupPath);
  console.log(`üì¶ Backup criado: ${backupPath}`);
  
  let content = fs.readFileSync(routesPath, 'utf8');
  
  // Substituir as rotas de assinatura por vers√µes corrigidas
  const newSubscriptionRoutes = `
// =================================
// SUBSCRIPTION ROUTES - CORRIGIDAS
// =================================

// Listar usu√°rios com assinatura (QUERY CORRIGIDA)
app.get('/api/admin/subscription-users', isAdmin, async (req, res) => {
  try {
    console.log('üîç Buscando usu√°rios com assinatura...');
    
    // PRIMEIRO: Verificar que tipos de status existem no banco
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        subscription_status: true,
        subscription_plan: true,
        subscription_start_date: true,
        subscription_end_date: true,
        createdAt: true
      }
    });
    
    console.log(\`üìä Total de usu√°rios no banco: \${allUsers.length}\`);
    
    // Filtrar usu√°rios que t√™m indica√ß√£o de assinatura
    const subscribedUsers = allUsers.filter(user => {
      return (
        user.subscription_status && 
        user.subscription_status.trim() !== '' &&
        user.subscription_status.toLowerCase() !== 'inactive' &&
        user.subscription_status.toLowerCase() !== 'canceled' &&
        user.subscription_status.toLowerCase() !== 'cancelled'
      ) || (
        user.subscription_plan && 
        user.subscription_plan.trim() !== ''
      );
    });
    
    console.log(\`‚úÖ Usu√°rios com assinatura encontrados: \${subscribedUsers.length}\`);
    
    // Log para debug
    if (subscribedUsers.length > 0) {
      console.log('üìã Exemplos de status encontrados:');
      subscribedUsers.slice(0, 3).forEach(user => {
        console.log(\`   - \${user.email}: status="\${user.subscription_status}", plano="\${user.subscription_plan}"\`);
      });
    }
    
    res.json({
      success: true,
      users: subscribedUsers,
      total: subscribedUsers.length,
      debug: {
        totalInDB: allUsers.length,
        withSubscription: subscribedUsers.length,
        statusTypes: [...new Set(allUsers.map(u => u.subscription_status).filter(Boolean))]
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rios:', error);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      debug: error.message
    });
  }
});

// M√©tricas de assinatura (C√ÅLCULOS CORRIGIDOS)
app.get('/api/admin/subscription-metrics', isAdmin, async (req, res) => {
  try {
    console.log('üìä Calculando m√©tricas de assinatura...');
    
    // Buscar todos os usu√°rios
    const allUsers = await prisma.user.findMany({
      select: {
        subscription_status: true,
        subscription_plan: true,
        subscription_start_date: true,
        createdAt: true
      }
    });
    
    // Calcular m√©tricas baseado nos dados reais
    const totalUsers = allUsers.length;
    
    const subscribedUsers = allUsers.filter(user => {
      return (
        user.subscription_status && 
        user.subscription_status.trim() !== '' &&
        user.subscription_status.toLowerCase() !== 'inactive' &&
        user.subscription_status.toLowerCase() !== 'canceled'
      ) || (
        user.subscription_plan && 
        user.subscription_plan.trim() !== ''
      );
    });
    
    const activeSubscriptions = subscribedUsers.length;
    
    // Usu√°rios em trial (tentar identificar)
    const trialUsers = allUsers.filter(user => 
      user.subscription_status && 
      user.subscription_status.toLowerCase().includes('trial')
    ).length;
    
    // Usu√°rios recentes (√∫ltimos 7 dias)
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    const recentSignups = allUsers.filter(user => 
      user.createdAt >= sevenDaysAgo
    ).length;
    
    // Calcular convers√£o
    const conversionRate = totalUsers > 0 ? 
      Math.round((activeSubscriptions / totalUsers) * 100) : 0;
    
    const metrics = {
      totalUsers: totalUsers,
      activeSubscriptions: activeSubscriptions,
      trialSubscriptions: trialUsers,
      premiumUsers: activeSubscriptions, // Considerando ativos como premium
      conversionRate: \`\${conversionRate}%\`,
      monthlyRevenue: activeSubscriptions * 29.90, // Estimativa
      recentSignups: recentSignups
    };
    
    console.log('üìà M√©tricas calculadas:', metrics);
    
    res.json({
      success: true,
      metrics: metrics,
      debug: {
        totalUsersInDB: totalUsers,
        usersWithStatus: subscribedUsers.length,
        statusTypes: [...new Set(allUsers.map(u => u.subscription_status).filter(Boolean))]
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao calcular m√©tricas:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao carregar m√©tricas',
      debug: error.message
    });
  }
});

// Configura√ß√µes de assinatura (inalterada)
app.get('/api/subscription-settings', isAdmin, async (req, res) => {
  try {
    const settings = {
      plans: [
        {
          id: 'basic',
          name: 'Plano B√°sico',
          price: 29.90,
          features: ['Acesso completo', 'Suporte por email']
        },
        {
          id: 'premium',
          name: 'Plano Premium',
          price: 49.90,
          features: ['Acesso completo', 'Suporte priorit√°rio', 'Recursos avan√ßados']
        }
      ],
      trialDays: 7,
      currencies: ['BRL', 'USD']
    };

    res.json({
      success: true,
      settings: settings
    });
  } catch (error) {
    console.error('Erro ao buscar configura√ß√µes:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao carregar configura√ß√µes'
    });
  }
});
`;

  // Remover rotas antigas de assinatura
  content = content.replace(
    /\/\/ =================================\s*\/\/ SUBSCRIPTION.*?(?=\/\/[^\/]|app\.|export|$)/gs, 
    ''
  );
  
  // Adicionar novas rotas antes da exporta√ß√£o
  const exportIndex = content.lastIndexOf('export');
  if (exportIndex !== -1) {
    content = content.slice(0, exportIndex) + newSubscriptionRoutes + '\n\n' + content.slice(exportIndex);
  } else {
    content += newSubscriptionRoutes;
  }
  
  // Limpar espa√ßos excessivos
  content = content.replace(/\n\n\n+/g, '\n\n');
  
  fs.writeFileSync(routesPath, content);
  console.log('‚úÖ Rotas de assinatura corrigidas');
  
  return true;
}

// Fun√ß√£o para criar script de teste r√°pido
function createQuickTest() {
  const testScript = `
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function quickTest() {
  try {
    console.log('üß™ TESTE R√ÅPIDO DOS DADOS\\n');
    
    // 1. Total de usu√°rios
    const total = await prisma.user.count();
    console.log(\`üìä Total de usu√°rios: \${total}\`);
    
    // 2. Usu√°rios com algum status
    const withStatus = await prisma.user.count({
      where: {
        subscription_status: { not: null }
      }
    });
    console.log(\`üìã Usu√°rios com status: \${withStatus}\`);
    
    // 3. Exemplos de usu√°rios
    const examples = await prisma.user.findMany({
      select: {
        email: true,
        subscription_status: true,
        subscription_plan: true
      },
      take: 5
    });
    
    console.log('\\nüë• Exemplos de usu√°rios:');
    examples.forEach((user, i) => {
      console.log(\`   \${i+1}. \${user.email}\`);
      console.log(\`      Status: "\${user.subscription_status || 'null'}"\`);
      console.log(\`      Plano: "\${user.subscription_plan || 'null'}"\`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

quickTest();
`;

  fs.writeFileSync('quick-test-data.js', testScript);
  console.log('üìù Script de teste criado: quick-test-data.js');
}

// Fun√ß√£o principal
async function main() {
  console.log('üöÄ CORRE√á√ÉO R√ÅPIDA - DADOS DO DASHBOARD\\n');
  console.log('Problema: Dashboard mostra 0 usu√°rios com assinatura\\n');
  console.log('Solu√ß√£o: Corrigir queries para buscar dados reais do banco\\n');
  console.log('=' * 60 + '\\n');
  
  try {
    // 1. Corrigir rotas
    const success = fixSubscriptionRoutes();
    
    if (success) {
      // 2. Criar teste r√°pido
      createQuickTest();
      
      console.log('\\nüéØ CORRE√á√ÉO APLICADA COM SUCESSO!\\n');
      console.log('üìã O que foi corrigido:');
      console.log('‚úÖ Query de usu√°rios agora busca TODOS os status v√°lidos');
      console.log('‚úÖ M√©tricas calculadas baseadas em dados reais');
      console.log('‚úÖ Logs de debug adicionados para identificar problemas');
      console.log('‚úÖ Backup do arquivo original criado');
      
      console.log('\\nüöÄ PR√ìXIMOS PASSOS:');
      console.log('1. Reiniciar o servidor: npm run dev');
      console.log('2. Testar dados: node quick-test-data.js');
      console.log('3. Verificar dashboard: http://localhost:3000/admin');
      console.log('4. Checar logs do servidor para debug');
      
      console.log('\\nüí° A corre√ß√£o agora:');
      console.log('- Busca TODOS os usu√°rios do banco');
      console.log('- Filtra os que t√™m indica√ß√£o de assinatura');
      console.log('- Calcula m√©tricas baseadas nos dados reais');
      console.log('- Adiciona logs detalhados para debug');
      
    } else {
      console.log('‚ùå Falha na corre√ß√£o. Verifique se o arquivo server/routes.ts existe.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o:', error);
  }
}

// Executar corre√ß√£o
if (require.main === module) {
  main();
}

module.exports = { fixSubscriptionRoutes, createQuickTest };