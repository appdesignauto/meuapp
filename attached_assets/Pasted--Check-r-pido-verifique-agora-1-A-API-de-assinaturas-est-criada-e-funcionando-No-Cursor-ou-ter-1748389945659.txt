 Check r√°pido (verifique agora):
1. A API de assinaturas est√° criada e funcionando?
No Cursor ou terminal, rode:

sql
Copiar
Editar
SELECT * FROM subscriptions ORDER BY createdAt DESC;
E:

sql
Copiar
Editar
SELECT * FROM users WHERE nivelacesso = 'premium';
Se tiver dados ‚Üí backend est√° populado ‚úÖ
Se estiver vazio ‚Üí o webhook pode n√£o estar criando corretamente ainda

2. A rota da API usada no frontend est√° correta?
Exemplo esperado:

js
Copiar
Editar
GET /api/admin/subscriptions
Confirme no console do navegador (F12 > Network > Fetch/XHR) se a rota existe e retorna 200 OK.

Se der 404 Not Found ‚Üí rota n√£o existe no backend

Se der 200 mas com [] ‚Üí rota existe mas n√£o est√° lendo os dados certos

Se der erro 500 ‚Üí backend falhou

3. Backend responde JSON corretamente?
Teste no navegador ou Postman:

ruby
Copiar
Editar
https://designauto.replit.dev/api/admin/subscriptions
Se vier [], a resposta est√° vazia.
Se vier HTML com <!DOCTYPE>, a rota est√° errada ou quebrada.

‚úÖ Solu√ß√£o sugerida: criar rota /api/admin/subscriptions
Aqui est√° um exemplo de rota pronta (Node/Express):

ts
Copiar
Editar
router.get('/subscriptions', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        u.name AS usuario,
        s.status,
        s.planType AS plano,
        s.origin AS origem,
        s.endDate AS expiracao,
        s.startDate AS criado_em,
        CURRENT_DATE AS hoje,
        DATE_PART('day', s.endDate - CURRENT_DATE) AS dias_restantes
      FROM subscriptions s
      INNER JOIN users u ON u.id = s.userId
      WHERE s.status = 'active'
      ORDER BY s.startDate DESC
    `);

    res.json(result.rows);
  } catch (err) {
    console.error('Erro ao carregar assinaturas:', err);
    res.status(500).json({ error: 'Erro ao buscar assinaturas' });
  }
});
4. O frontend est√° esperando esses campos?
Confirme se o seu frontend espera:

Campo esperado	Deve vir do backend como...
usuario	u.name
status	s.status
plano	s.planType
origem	s.origin
expiracao	s.endDate
dias_restantes	c√°lculo em SQL
criado_em	s.startDate

‚úÖ Resumo do que voc√™ deve fazer agora:
‚úÖ Testar se h√° dados reais no banco (users, subscriptions)

‚úÖ Ver se o frontend est√° realmente chamando a rota (/api/admin/subscriptions)

‚úÖ Se a rota n√£o existir: crie ela com base no modelo acima

‚úÖ Certifique-se que o backend responde JSON no formato esperado

üîÅ Ap√≥s ajustes, clique no bot√£o "Atualizar" no dashboard

Se quiser, posso te gerar:

‚úÖ O backend completo da rota /subscriptions

‚úÖ Mock de retorno para testar no frontend antes de conectar de fato

‚úÖ Query SQL otimizada para exibir m√©tricas no topo (total, ativos, expirando etc)