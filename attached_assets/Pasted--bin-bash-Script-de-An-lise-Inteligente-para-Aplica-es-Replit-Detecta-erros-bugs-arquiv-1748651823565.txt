#!/bin/bash

# Script de Análise Inteligente para Aplicações Replit
# Detecta erros, bugs, arquivos desnecessários, problemas de segurança e otimizações

echo "🔍 INICIANDO ANÁLISE INTELIGENTE DA APLICAÇÃO..."
echo "=================================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Função para detectar tipo de projeto
detect_project_type() {
    echo -e "${BLUE}📋 DETECTANDO TIPO DE PROJETO...${NC}"
    
    if [ -f "package.json" ]; then
        echo "✓ Projeto Node.js/JavaScript detectado"
        PROJECT_TYPE="nodejs"
    elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "Pipfile" ]; then
        echo "✓ Projeto Python detectado"
        PROJECT_TYPE="python"
    elif [ -f "composer.json" ]; then
        echo "✓ Projeto PHP detectado"
        PROJECT_TYPE="php"
    elif [ -f "Cargo.toml" ]; then
        echo "✓ Projeto Rust detectado"
        PROJECT_TYPE="rust"
    elif [ -f "go.mod" ]; then
        echo "✓ Projeto Go detectado"
        PROJECT_TYPE="go"
    else
        echo "⚠️ Tipo de projeto não identificado automaticamente"
        PROJECT_TYPE="generic"
    fi
    echo ""
}

# Análise de arquivos desnecessários
analyze_unnecessary_files() {
    echo -e "${YELLOW}🗑️  ANALISANDO ARQUIVOS DESNECESSÁRIOS...${NC}"
    
    # Arquivos comuns desnecessários
    unnecessary_patterns=(
        "*.log" "*.tmp" "*.temp" "*.bak" "*.backup" "*.old"
        ".DS_Store" "Thumbs.db" "desktop.ini"
        "*.pyc" "__pycache__" "*.pyo"
        "node_modules" ".npm" ".yarn"
        ".env.local" ".env.development" ".env.test"
        "*.swp" "*.swo" "*~"
        ".vscode" ".idea"
        "coverage" ".nyc_output"
        "dist" "build" ".next" ".nuxt"
    )
    
    found_unnecessary=0
    for pattern in "${unnecessary_patterns[@]}"; do
        files=$(find . -name "$pattern" -type f 2>/dev/null | head -10)
        dirs=$(find . -name "$pattern" -type d 2>/dev/null | head -5)
        
        if [ ! -z "$files" ] || [ ! -z "$dirs" ]; then
            if [ $found_unnecessary -eq 0 ]; then
                echo "❌ Arquivos/pastas desnecessários encontrados:"
                found_unnecessary=1
            fi
            echo "   • $pattern"
            echo "$files" | sed 's/^/     /'
            echo "$dirs" | sed 's/^/     /'
        fi
    done
    
    if [ $found_unnecessary -eq 0 ]; then
        echo "✅ Nenhum arquivo desnecessário óbvio encontrado"
    fi
    echo ""
}

# Análise de segurança
security_analysis() {
    echo -e "${RED}🔒 ANÁLISE DE SEGURANÇA...${NC}"
    
    security_issues=0
    
    # Verificar arquivos .env expostos
    if [ -f ".env" ]; then
        echo "⚠️  Arquivo .env encontrado - verifique se não está sendo commitado"
        security_issues=$((security_issues + 1))
    fi
    
    # Procurar por senhas hardcoded
    hardcoded_secrets=$(grep -r -i -E "(password|senha|secret|token|key|api_key)" --include="*.js" --include="*.py" --include="*.php" --include="*.go" --include="*.rs" . 2>/dev/null | grep -v -E "(//|#|/\*)" | head -5)
    if [ ! -z "$hardcoded_secrets" ]; then
        echo "🚨 Possíveis segredos hardcoded encontrados:"
        echo "$hardcoded_secrets" | sed 's/^/   /'
        security_issues=$((security_issues + 1))
    fi
    
    # Verificar permissões de arquivos suspeitas
    suspicious_perms=$(find . -type f -perm -o+w 2>/dev/null | grep -v ".git" | head -5)
    if [ ! -z "$suspicious_perms" ]; then
        echo "⚠️  Arquivos com permissões suspeitas (write para outros):"
        echo "$suspicious_perms" | sed 's/^/   /'
        security_issues=$((security_issues + 1))
    fi
    
    if [ $security_issues -eq 0 ]; then
        echo "✅ Nenhum problema de segurança óbvio detectado"
    fi
    echo ""
}

# Análise específica por linguagem
language_specific_analysis() {
    echo -e "${PURPLE}🔧 ANÁLISE ESPECÍFICA DA LINGUAGEM...${NC}"
    
    case $PROJECT_TYPE in
        "nodejs")
            nodejs_analysis
            ;;
        "python")
            python_analysis
            ;;
        "php")
            php_analysis
            ;;
        *)
            echo "✓ Análise genérica aplicada"
            ;;
    esac
    echo ""
}

# Análise Node.js
nodejs_analysis() {
    echo "📦 Analisando projeto Node.js..."
    
    # Verificar package.json
    if [ -f "package.json" ]; then
        # Dependências não utilizadas
        if command -v npm &> /dev/null; then
            echo "🔍 Verificando dependências não utilizadas..."
            # Listar dependências que podem não estar sendo usadas
            deps=$(jq -r '.dependencies | keys[]' package.json 2>/dev/null)
            for dep in $deps; do
                if ! grep -r "require.*$dep\|import.*$dep" --include="*.js" --include="*.ts" . &>/dev/null; then
                    echo "   ⚠️  Dependência possivelmente não utilizada: $dep"
                fi
            done
        fi
        
        # Verificar vulnerabilidades
        if command -v npm &> /dev/null; then
            echo "🛡️  Verificando vulnerabilidades..."
            npm audit --audit-level=moderate 2>/dev/null | grep -E "(found|vulnerabilities)" || echo "   ✅ Nenhuma vulnerabilidade crítica encontrada"
        fi
    fi
    
    # Procurar por console.log em produção
    console_logs=$(grep -r "console\.log" --include="*.js" --include="*.ts" . 2>/dev/null | wc -l)
    if [ $console_logs -gt 0 ]; then
        echo "🐛 $console_logs console.log() encontrados - considere remover para produção"
    fi
}

# Análise Python
python_analysis() {
    echo "🐍 Analisando projeto Python..."
    
    # Verificar imports não utilizados
    python_files=$(find . -name "*.py" -type f)
    if [ ! -z "$python_files" ]; then
        echo "🔍 Verificando possíveis problemas no código Python..."
        
        # Procurar por imports não utilizados (básico)
        for file in $python_files; do
            imports=$(grep "^import\|^from.*import" "$file" 2>/dev/null | head -3)
            if [ ! -z "$imports" ]; then
                # Verificação simples de uso
                unused_imports=$(echo "$imports" | while read import_line; do
                    module=$(echo "$import_line" | sed -E 's/^(import|from) ([a-zA-Z0-9_]+).*/\2/')
                    if ! grep -q "$module" "$file" 2>/dev/null | tail -n +2; then
                        echo "   ⚠️  $file: possível import não utilizado - $import_line"
                    fi
                done)
                echo "$unused_imports"
            fi
        done
        
        # Verificar prints em arquivos Python
        print_statements=$(grep -r "print(" --include="*.py" . 2>/dev/null | wc -l)
        if [ $print_statements -gt 0 ]; then
            echo "🐛 $print_statements statements print() encontrados - considere usar logging"
        fi
    fi
}

# Análise PHP
php_analysis() {
    echo "🐘 Analisando projeto PHP..."
    
    # Verificar var_dump, print_r
    debug_statements=$(grep -r -E "(var_dump|print_r|echo.*debug)" --include="*.php" . 2>/dev/null | wc -l)
    if [ $debug_statements -gt 0 ]; then
        echo "🐛 $debug_statements statements de debug encontrados"
    fi
    
    # Verificar por vulnerabilidades comuns
    sql_injection=$(grep -r -E "\\\$_(GET|POST|REQUEST).*\\\$" --include="*.php" . 2>/dev/null | wc -l)
    if [ $sql_injection -gt 0 ]; then
        echo "🚨 Possíveis vulnerabilidades de SQL injection encontradas: $sql_injection"
    fi
}

# Análise de performance
performance_analysis() {
    echo -e "${GREEN}⚡ ANÁLISE DE PERFORMANCE...${NC}"
    
    # Tamanho dos arquivos
    large_files=$(find . -type f -size +1M ! -path "./.git/*" ! -path "./node_modules/*" 2>/dev/null)
    if [ ! -z "$large_files" ]; then
        echo "📁 Arquivos grandes encontrados (>1MB):"
        echo "$large_files" | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "   • $file ($size)"
        done
    else
        echo "✅ Nenhum arquivo muito grande encontrado"
    fi
    
    # Contar linhas de código
    code_files=$(find . -type f \( -name "*.js" -o -name "*.py" -o -name "*.php" -o -name "*.go" -o -name "*.rs" -o -name "*.java" -o -name "*.cpp" -o -name "*.c" \) ! -path "./.git/*" ! -path "./node_modules/*" 2>/dev/null)
    if [ ! -z "$code_files" ]; then
        total_lines=$(wc -l $code_files 2>/dev/null | tail -1 | awk '{print $1}')
        echo "📊 Total de linhas de código: $total_lines"
    fi
    echo ""
}

# Sugestões de otimização
optimization_suggestions() {
    echo -e "${BLUE}💡 SUGESTÕES DE OTIMIZAÇÃO...${NC}"
    
    # Verificar se existe .gitignore
    if [ ! -f ".gitignore" ]; then
        echo "📝 Criar arquivo .gitignore para ignorar arquivos desnecessários"
    fi
    
    # Verificar se existe README
    if [ ! -f "README.md" ] && [ ! -f "README.txt" ]; then
        echo "📚 Adicionar arquivo README com documentação do projeto"
    fi
    
    # Sugestões específicas por tipo de projeto
    case $PROJECT_TYPE in
        "nodejs")
            if [ ! -f ".nvmrc" ]; then
                echo "🔧 Considere adicionar arquivo .nvmrc para fixar versão do Node.js"
            fi
            if [ ! -f "package-lock.json" ] && [ ! -f "yarn.lock" ]; then
                echo "🔒 Execute npm install para gerar package-lock.json"
            fi
            ;;
        "python")
            if [ ! -f "requirements.txt" ] && [ ! -f "pyproject.toml" ]; then
                echo "📦 Gerar requirements.txt com: pip freeze > requirements.txt"
            fi
            if [ ! -f ".python-version" ]; then
                echo "🐍 Considere especificar versão do Python em .python-version"
            fi
            ;;
    esac
    
    echo "🚀 Considere configurar CI/CD para automatizar testes e deploys"
    echo "🔍 Use linters específicos da linguagem para melhor qualidade de código"
    echo ""
}

# Resumo executivo
executive_summary() {
    echo -e "${GREEN}📋 RESUMO EXECUTIVO${NC}"
    echo "==================="
    
    # Contar arquivos por tipo
    total_files=$(find . -type f ! -path "./.git/*" | wc -l)
    code_files=$(find . -type f \( -name "*.js" -o -name "*.py" -o -name "*.php" -o -name "*.go" -o -name "*.rs" \) ! -path "./.git/*" ! -path "./node_modules/*" | wc -l)
    
    echo "📊 Estatísticas do projeto:"
    echo "   • Total de arquivos: $total_files"
    echo "   • Arquivos de código: $code_files"
    echo "   • Tipo de projeto: $PROJECT_TYPE"
    
    echo ""
    echo "🎯 Ações recomendadas:"
    echo "   1. Revisar e remover arquivos desnecessários identificados"
    echo "   2. Corrigir problemas de segurança encontrados"
    echo "   3. Implementar sugestões de otimização"
    echo "   4. Configurar ferramentas de linting automático"
    echo "   5. Adicionar testes automatizados se não existirem"
    echo ""
}

# Comando para limpeza automática
cleanup_command() {
    echo -e "${YELLOW}🧹 COMANDO DE LIMPEZA AUTOMÁTICA${NC}"
    echo "=================================="
    echo ""
    echo "Para executar limpeza automática, execute:"
    echo ""
    echo -e "${GREEN}# Remover arquivos temporários comuns${NC}"
    echo "find . -name '*.tmp' -o -name '*.temp' -o -name '*.log' -o -name '*.bak' | xargs rm -f"
    echo ""
    echo -e "${GREEN}# Remover caches Python${NC}"
    echo "find . -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true"
    echo "find . -name '*.pyc' -delete"
    echo ""
    echo -e "${GREEN}# Remover arquivos do sistema${NC}"
    echo "find . -name '.DS_Store' -o -name 'Thumbs.db' -o -name 'desktop.ini' | xargs rm -f"
    echo ""
    echo -e "${RED}⚠️  ATENÇÃO: Revise antes de executar os comandos de limpeza!${NC}"
    echo ""
}

# Executar todas as análises
main() {
    detect_project_type
    analyze_unnecessary_files
    security_analysis
    language_specific_analysis
    performance_analysis
    optimization_suggestions
    executive_summary
    cleanup_command
    
    echo -e "${GREEN}✅ ANÁLISE CONCLUÍDA!${NC}"
    echo "💡 Execute este script regularmente para manter seu projeto otimizado."
}

# Verificar se está sendo executado como script principal
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi