Objetivo
Conectar o painel de mapeamento de produtos Hotmart com:

Banco de dados PostgreSQL (via Prisma)

Endpoint para criar, listar e excluir mapeamentos

Verifica√ß√£o autom√°tica de mapeamento no momento do processamento de webhooks

üß† Etapas T√©cnicas (Back-end Replit)
1. Criar o modelo HotmartProductMapping no Prisma
prisma
Copiar
Editar
model HotmartProductMapping {
  id              String   @id @default(uuid())
  productId       String   // ID do produto na Hotmart
  offerCode       String?  // C√≥digo da oferta (opcional)
  productName     String
  planType        String   // Ex: "premium_mensal", "premium_anual"
  durationDays    Int      // Ex: 30, 180, 365
  createdAt       DateTime @default(now())
}
2. Executar migra√ß√£o no banco de dados
bash
Copiar
Editar
npx prisma migrate dev --name add_hotmart_product_mapping
3. Criar os servi√ßos de back-end
üìÅ server/services/mapping-service.ts
ts
Copiar
Editar
import { prisma } from "@/lib/prisma"

export const MappingService = {
  async create(data) {
    return await prisma.hotmartProductMapping.create({ data });
  },
  async list() {
    return await prisma.hotmartProductMapping.findMany();
  },
  async delete(id: string) {
    return await prisma.hotmartProductMapping.delete({ where: { id } });
  },
  async findMatch(productId: string, offerCode?: string) {
    return await prisma.hotmartProductMapping.findFirst({
      where: {
        productId,
        ...(offerCode ? { offerCode } : {})
      }
    });
  }
}
4. Criar as rotas no Express ou Fastify
üìÅ server/routes/mapping-routes.ts
ts
Copiar
Editar
import express from "express";
import { MappingService } from "../services/mapping-service";

const router = express.Router();

router.get("/api/mappings", async (req, res) => {
  const data = await MappingService.list();
  res.json(data);
});

router.post("/api/mappings", async (req, res) => {
  const { productId, offerCode, productName, planType, durationDays } = req.body;
  const data = await MappingService.create({ productId, offerCode, productName, planType, durationDays });
  res.status(201).json(data);
});

router.delete("/api/mappings/:id", async (req, res) => {
  const data = await MappingService.delete(req.params.id);
  res.json(data);
});

export default router;
5. Conectar ao server/index.ts
ts
Copiar
Editar
import mappingRoutes from "./routes/mapping-routes";

app.use(mappingRoutes);
6. Ajustar o webhook para consultar o mapeamento
No hotmart-service.ts (ou onde processa o evento PURCHASE_APPROVED):

ts
Copiar
Editar
const mapping = await MappingService.findMatch(productId, offerCode);

if (!mapping) {
  return res.status(200).json({
    success: false,
    message: "Assinaturainv√°lida",
    note: "Produto n√£o mapeado, mas confirmamos o recebimento do webhook"
  });
}

// Aqui ativar o plano com base em mapping.planType e mapping.durationDays
‚úÖ Resultado Final
O admin adiciona os mapeamentos no painel

O Replit salva no banco via Prisma

Quando a Hotmart envia um webhook:

O sistema procura um mapeamento correspondente

Se encontrar, ativa o plano correspondente

Se n√£o encontrar, retorna sucesso parcial (200) com mensagem de assinatura inv√°lida (mas sem gerar retry)