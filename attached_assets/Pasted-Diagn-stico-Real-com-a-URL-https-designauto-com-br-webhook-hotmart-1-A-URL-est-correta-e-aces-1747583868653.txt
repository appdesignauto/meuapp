Diagn√≥stico Real com a URL https://designauto.com.br/webhook/hotmart
üìç 1. A URL est√° correta e acess√≠vel?
Vamos garantir que o endpoint est√° escutando no caminho certo:

Voc√™ precisa ter um arquivo de rota no backend que atenda a esse caminho:

ts
Copiar
Editar
// server/routes/webhook-routes.ts (exemplo)
import express from 'express';
const router = express.Router();

router.post('/webhook/hotmart', async (req, res) => {
  console.log("üì© Webhook recebido:", JSON.stringify(req.body, null, 2));

  // Teste b√°sico para ver se chega
  return res.status(200).json({ success: true, note: "Webhook chegou" });
});

export default router;
Esse arquivo precisa estar importado na sua aplica√ß√£o principal (geralmente em server/index.ts):

ts
Copiar
Editar
import webhookRoutes from './routes/webhook-routes';
app.use('/', webhookRoutes);
üìç 2. A Hotmart est√° enviando o body como application/json?
Verifique no log da Hotmart se os headers do envio incluem:

http
Copiar
Editar
Content-Type: application/json
E no seu backend, o Express precisa usar:

ts
Copiar
Editar
app.use(express.json()); // para processar JSON corretamente
Se isso n√£o estiver presente, o req.body chega como undefined, e o processamento falha silenciosamente.

üìç 3. Seu handler /webhook/hotmart est√° validando campos como offerId, productId, subscription?
O erro "Assinatura inv√°lida" ou "Erro ao processar webhook" pode vir de algo assim no c√≥digo:

ts
Copiar
Editar
const { product, offer, buyer, subscription } = req.body.data;

if (!subscription || !subscription.plan) {
  return res.status(200).json({ success: false, message: "Assinatura inv√°lida" });
}
‚úÖ Solu√ß√£o: adicione um log no in√≠cio:

ts
Copiar
Editar
console.log("üì¶ Corpo do webhook:", JSON.stringify(req.body, null, 2));
üìç 4. Garantir que product.id e offer.code existem no banco
Voc√™ j√° criou os mapeamentos com:

productId: 5381714

offerId: aukjngrt

Se o seu c√≥digo estiver buscando errado, exemplo:

ts
Copiar
Editar
const mapping = await db.hotmartProductMapping.findFirst({
  where: {
    offerCode: offer.code  // ‚ùå mas o campo no banco se chama offerId
  }
});
üõ† Corrigir:

ts
Copiar
Editar
where: {
  offerId: offer.code   // ‚úÖ coerente com o nome usado na tabela
}
üìç 5. Simular localmente (fortemente recomendado)
Crie um arquivo chamado simulate-webhook.ts com o conte√∫do da Hotmart:

ts
Copiar
Editar
import axios from 'axios';

axios.post("https://designauto.com.br/webhook/hotmart", {
  id: "123456",
  creation_date: Date.now(),
  event: "PURCHASE_APPROVED",
  version: "2.0.0",
  data: {
    product: {
      id: 5381714,
      name: "App DesignAuto"
    },
    offer: {
      code: "aukjngrt"
    },
    buyer: {
      email: "cliente1@example.com"
    },
    subscription: {
      status: "ACTIVE",
      plan: {
        id: 1234,
        name: "Plano Anual"
      },
      subscriber: {
        code: "9OL3KY4O"
      }
    }
  },
  hottok: "fake"
}).then(res => {
  console.log("‚úÖ Resposta:", res.data);
}).catch(err => {
  console.error("‚ùå Erro:", err.response?.data || err.message);
});
‚úÖ A√ß√£o imediata recomendada
Confirme que seu servidor Express tem app.use(express.json())

Adicione console.log(JSON.stringify(req.body, null, 2)) na rota

Verifique se o offerId e productId batem com os campos do banco

Cole aqui seu c√≥digo atual da rota POST /webhook/hotmart para eu revisar com precis√£o