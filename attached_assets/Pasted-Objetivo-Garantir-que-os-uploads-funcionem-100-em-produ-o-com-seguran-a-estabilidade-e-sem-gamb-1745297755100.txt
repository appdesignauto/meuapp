Objetivo:
Garantir que os uploads funcionem 100% em produ√ß√£o, com seguran√ßa, estabilidade e sem gambiarras.

üß≠ Recomenda√ß√£o em 3 n√≠veis:
‚úÖ 1. A√á√ÉO IMEDIATA (HOTFIX CONTROLADO)
Use seu emergency-auth-bypass.js com valida√ß√£o segura.

üõ† Inclua no script:

Verifica√ß√£o se o arquivo est√° indo para userId/filename

Confirma√ß√£o se auth.uid() ou o ID enviado corresponde ao path

Log de tentativas para rastrear abusos

üß± Com isso, voc√™ garante que o sistema siga funcionando em produ√ß√£o sem quebrar a seguran√ßa.

üß∞ 2. INVESTIGA√á√ÉO DE PRODU√á√ÉO
Revise os pontos mais cr√≠ticos do ambiente:

‚úÖ Vari√°veis no Replit (SUPABASE_URL, SUPABASE_ANON_KEY)

‚úÖ Sess√£o ativa com supabase.auth.getSession()

‚úÖ Bucket existente com mesmo nome

‚úÖ Caminho de upload come√ßa com user.id/ conforme suas policies

üîé Adicione logs para verificar se a sess√£o do usu√°rio est√° realmente ativa na produ√ß√£o.

üß± 3. AJUSTE ESTRUTURAL (RECOMENDADO)
Implemente um middleware de autentica√ß√£o flex√≠vel no seu backend ou frontend que:

Valide via auth.getSession() (normal)

Como fallback, aceite token + userId na query string

Valide que o arquivo est√° indo para a pasta correta (auth.uid() === folderName)

Gere logs de erro ou sucesso

‚úÖ Isso elimina a necessidade de rotas "emergency" a longo prazo e mant√©m seguran√ßa.

üß© Se quiser uma rota segura de upload agora, aqui est√° um exemplo pronto (Express):
ts
Copiar
Editar
app.post("/upload-avatar", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  const userId = req.body.userId;

  if (!token || !userId) return res.status(401).json({ error: "N√£o autorizado." });

  const supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
  const { data: { user }, error } = await supabaseClient.auth.getUser(token);

  if (error || user.id !== userId) return res.status(403).json({ error: "Usu√°rio inv√°lido." });

  const file = req.files?.avatar;
  const path = `${user.id}/avatar.png`;

  const { error: uploadError } = await supabaseClient.storage.from("avatars").upload(path, file, {
    upsert: true
  });

  if (uploadError) return res.status(500).json({ error: uploadError.message });

  res.json({ message: "Avatar atualizado com sucesso!" });
});
