#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Script para remover rotas duplicadas do sistema de assinatura
 * Remove duplicações em server/index.ts, server/routes.ts e scripts de correção
 */

const BACKUP_DIR = 'backup-routes-cleanup';
const FILES_TO_CLEAN = [
  'server/index.ts',
  'server/routes.ts'
];

const SCRIPTS_TO_REMOVE = [
  'fix-subscription-endpoint-final.js',
  'fix-subscription-endpoint.js',
  'test-subscription-routes.js'
];

// Criar diretório de backup
function createBackup() {
  console.log('📦 Criando backup dos arquivos...');
  
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
  }
  
  FILES_TO_CLEAN.forEach(file => {
    if (fs.existsSync(file)) {
      const backupPath = path.join(BACKUP_DIR, path.basename(file));
      fs.copyFileSync(file, backupPath);
      console.log(`✅ Backup criado: ${backupPath}`);
    }
  });
}

// Remover rotas duplicadas do server/index.ts
function cleanServerIndex() {
  console.log('🧹 Limpando server/index.ts...');
  
  const filePath = 'server/index.ts';
  if (!fs.existsSync(filePath)) {
    console.log('⚠️  server/index.ts não encontrado');
    return;
  }
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Remover rota duplicada de subscription-users (linha 208)
  const duplicateRoutePattern = /\/\/ Rota duplicada - REMOVER[\s\S]*?app\.get\('\/api\/admin\/subscription-users'[\s\S]*?}\);/g;
  content = content.replace(duplicateRoutePattern, '');
  
  // Remover comentários de debug antigos
  content = content.replace(/\/\/ DEBUG:.*$/gm, '');
  content = content.replace(/\/\/ TEMP:.*$/gm, '');
  
  // Limpar linhas vazias excessivas
  content = content.replace(/\n\n\n+/g, '\n\n');
  
  fs.writeFileSync(filePath, content);
  console.log('✅ server/index.ts limpo');
}

// Consolidar rotas no server/routes.ts
function cleanServerRoutes() {
  console.log('🧹 Consolidando server/routes.ts...');
  
  const filePath = 'server/routes.ts';
  if (!fs.existsSync(filePath)) {
    console.log('⚠️  server/routes.ts não encontrado');
    return;
  }
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Template das rotas consolidadas (mantendo apenas as versões funcionais)
  const consolidatedRoutes = `
// =================================
// SUBSCRIPTION MANAGEMENT ROUTES
// =================================

// Listar usuários com assinatura ativa
app.get('/api/admin/subscription-users', isAdmin, async (req, res) => {
  try {
    const users = await prisma.user.findMany({
      where: {
        OR: [
          { subscription_status: 'active' },
          { subscription_status: 'trialing' }
        ]
      },
      select: {
        id: true,
        email: true,
        subscription_status: true,
        subscription_plan: true,
        subscription_start_date: true,
        subscription_end_date: true,
        createdAt: true
      },
      orderBy: {
        subscription_start_date: 'desc'
      }
    });

    res.json({
      success: true,
      users: users,
      total: users.length
    });
  } catch (error) {
    console.error('Erro ao buscar usuários de assinatura:', error);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor'
    });
  }
});

// Métricas de assinatura para dashboard
app.get('/api/admin/subscription-metrics', isAdmin, async (req, res) => {
  try {
    const [activeUsers, trialingUsers, totalRevenue, recentSignups] = await Promise.all([
      prisma.user.count({
        where: { subscription_status: 'active' }
      }),
      prisma.user.count({
        where: { subscription_status: 'trialing' }
      }),
      prisma.user.aggregate({
        where: { subscription_status: 'active' },
        _sum: { subscription_amount: true }
      }),
      prisma.user.count({
        where: {
          subscription_start_date: {
            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Últimos 7 dias
          }
        }
      })
    ]);

    res.json({
      success: true,
      metrics: {
        activeSubscriptions: activeUsers,
        trialSubscriptions: trialingUsers,
        totalUsers: activeUsers + trialingUsers,
        monthlyRevenue: totalRevenue._sum.subscription_amount || 0,
        recentSignups: recentSignups
      }
    });
  } catch (error) {
    console.error('Erro ao buscar métricas:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao carregar métricas'
    });
  }
});

// Configurações de assinatura (apenas versão de produção)
app.get('/api/subscription-settings', isAdmin, async (req, res) => {
  try {
    const settings = {
      plans: [
        {
          id: 'basic',
          name: 'Plano Básico',
          price: 29.90,
          features: ['Acesso completo', 'Suporte por email']
        },
        {
          id: 'premium',
          name: 'Plano Premium',
          price: 49.90,
          features: ['Acesso completo', 'Suporte prioritário', 'Recursos avançados']
        }
      ],
      trialDays: 7,
      currencies: ['BRL', 'USD']
    };

    res.json({
      success: true,
      settings: settings
    });
  } catch (error) {
    console.error('Erro ao buscar configurações:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao carregar configurações'
    });
  }
});
`;

  // Remover todas as rotas de assinatura existentes
  content = content.replace(/\/\/ SUBSCRIPTION.*?(?=\/\/|app\.|$)/gs, '');
  content = content.replace(/app\.get\('\/api\/admin\/subscription-users'[\s\S]*?}\);/g, '');
  content = content.replace(/app\.get\('\/api\/admin\/subscription-metrics'[\s\S]*?}\);/g, '');
  content = content.replace(/app\.get\('\/api\/subscription-settings'[\s\S]*?}\);/g, '');
  content = content.replace(/app\.get\('\/api\/test\/subscription-settings'[\s\S]*?}\);/g, '');
  
  // Adicionar rotas consolidadas no final, antes da exportação
  const exportIndex = content.lastIndexOf('export');
  if (exportIndex !== -1) {
    content = content.slice(0, exportIndex) + consolidatedRoutes + '\n\n' + content.slice(exportIndex);
  } else {
    content += consolidatedRoutes;
  }
  
  // Limpar linhas vazias excessivas
  content = content.replace(/\n\n\n+/g, '\n\n');
  
  fs.writeFileSync(filePath, content);
  console.log('✅ server/routes.ts consolidado');
}

// Remover scripts de correção obsoletos
function removeObsoleteScripts() {
  console.log('🗑️  Removendo scripts obsoletos...');
  
  SCRIPTS_TO_REMOVE.forEach(script => {
    if (fs.existsSync(script)) {
      // Fazer backup antes de remover
      const backupPath = path.join(BACKUP_DIR, script);
      fs.copyFileSync(script, backupPath);
      fs.unlinkSync(script);
      console.log(`✅ Removido: ${script} (backup em ${backupPath})`);
    } else {
      console.log(`⚠️  ${script} não encontrado`);
    }
  });
}

// Verificar integridade após limpeza
function verifyCleanup() {
  console.log('🔍 Verificando integridade...');
  
  const issues = [];
  
  // Verificar se não há rotas duplicadas restantes
  FILES_TO_CLEAN.forEach(file => {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      
      // Contar ocorrências de cada endpoint
      const subscriptionUsersCount = (content.match(/\/api\/admin\/subscription-users/g) || []).length;
      const subscriptionMetricsCount = (content.match(/\/api\/admin\/subscription-metrics/g) || []).length;
      const subscriptionSettingsCount = (content.match(/\/api\/subscription-settings/g) || []).length;
      
      if (subscriptionUsersCount > 1) {
        issues.push(`${file}: ${subscriptionUsersCount} rotas subscription-users`);
      }
      if (subscriptionMetricsCount > 1) {
        issues.push(`${file}: ${subscriptionMetricsCount} rotas subscription-metrics`);
      }
      if (subscriptionSettingsCount > 1) {
        issues.push(`${file}: ${subscriptionSettingsCount} rotas subscription-settings`);
      }
    }
  });
  
  if (issues.length > 0) {
    console.log('⚠️  Possíveis duplicações restantes:');
    issues.forEach(issue => console.log(`   - ${issue}`));
  } else {
    console.log('✅ Nenhuma duplicação encontrada');
  }
}

// Gerar relatório de limpeza
function generateReport() {
  const report = `
RELATÓRIO DE LIMPEZA DE ROTAS DUPLICADAS
========================================

Data: ${new Date().toLocaleString('pt-BR')}

AÇÕES EXECUTADAS:
✅ Backup criado em: ${BACKUP_DIR}/
✅ Rotas duplicadas removidas de server/index.ts
✅ Rotas consolidadas em server/routes.ts
✅ Scripts obsoletos removidos

ROTAS MANTIDAS (versões funcionais):
- GET /api/admin/subscription-users (com middleware isAdmin)
- GET /api/admin/subscription-metrics (com middleware isAdmin)
- GET /api/subscription-settings (com middleware isAdmin)

SCRIPTS REMOVIDOS:
${SCRIPTS_TO_REMOVE.map(script => `- ${script}`).join('\n')}

PRÓXIMOS PASSOS:
1. Testar as rotas no dashboard administrativo
2. Verificar se o middleware SPA não está mais interceptando
3. Monitorar performance das consultas
4. Remover backup após confirmação de funcionamento

Para reverter as mudanças:
cp ${BACKUP_DIR}/* ./
`;

  fs.writeFileSync('cleanup-report.txt', report);
  console.log('\n📋 Relatório salvo em: cleanup-report.txt');
}

// Executar limpeza
async function main() {
  console.log('🚀 Iniciando limpeza de rotas duplicadas...\n');
  
  try {
    createBackup();
    cleanServerIndex();
    cleanServerRoutes();
    removeObsoleteScripts();
    verifyCleanup();
    generateReport();
    
    console.log('\n✅ Limpeza concluída com sucesso!');
    console.log('🔄 Reinicie o servidor para aplicar as mudanças');
    console.log('📋 Verifique o relatório em: cleanup-report.txt');
    
  } catch (error) {
    console.error('❌ Erro durante a limpeza:', error);
    console.log('🔄 Restaure os backups se necessário');
  }
}

if (require.main === module) {
  main();
}