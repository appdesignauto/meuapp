#!/usr/bin/env node

/**
 * Inspetor direto do banco de dados para identificar dados reais
 * Vai mostrar exatamente que dados existem na tabela User
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function inspectDatabase() {
  console.log('🔍 INSPEÇÃO DIRETA DO BANCO DE DADOS\n');
  console.log('=' * 60 + '\n');
  
  try {
    // 1. Verificar estrutura da tabela
    console.log('📋 1. ESTRUTURA DA TABELA USER:');
    const firstUser = await prisma.user.findFirst();
    
    if (firstUser) {
      console.log('✅ Campos disponíveis:');
      Object.keys(firstUser).forEach(key => {
        const value = firstUser[key];
        const type = typeof value;
        console.log(`   - ${key}: ${type} = "${value}"`);
      });
    }
    
    console.log('\n' + '=' * 60 + '\n');
    
    // 2. Contar total de usuários
    const totalUsers = await prisma.user.count();
    console.log(`📊 2. TOTAL DE USUÁRIOS: ${totalUsers}\n`);
    
    // 3. Mostrar TODOS os usuários com detalhes
    console.log('👥 3. TODOS OS USUÁRIOS (com detalhes completos):');
    const allUsers = await prisma.user.findMany({
      orderBy: { createdAt: 'desc' }
    });
    
    allUsers.forEach((user, index) => {
      console.log(`\n${index + 1}. 📧 ${user.email || 'Sem email'}`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Status Assinatura: "${user.subscription_status || 'null'}"`);
      console.log(`   Plano: "${user.subscription_plan || 'null'}"`);
      console.log(`   Data Início: ${user.subscription_start_date || 'null'}`);
      console.log(`   Data Fim: ${user.subscription_end_date || 'null'}`);
      console.log(`   Criado em: ${user.createdAt}`);
      
      // Verificar se há outros campos relacionados à assinatura
      Object.keys(user).forEach(key => {
        if (key.toLowerCase().includes('subscription') && 
            !['subscription_status', 'subscription_plan', 'subscription_start_date', 'subscription_end_date'].includes(key)) {
          console.log(`   ${key}: "${user[key]}"`);
        }
      });
    });
    
    console.log('\n' + '=' * 60 + '\n');
    
    // 4. Análise de status
    console.log('📈 4. ANÁLISE DE STATUS DE ASSINATURA:');
    const statusCounts = {};
    const planCounts = {};
    
    allUsers.forEach(user => {
      const status = user.subscription_status || 'null';
      const plan = user.subscription_plan || 'null';
      
      statusCounts[status] = (statusCounts[status] || 0) + 1;
      planCounts[plan] = (planCounts[plan] || 0) + 1;
    });
    
    console.log('\n📊 Distribuição por Status:');
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`   - "${status}": ${count} usuários`);
    });
    
    console.log('\n📊 Distribuição por Plano:');
    Object.entries(planCounts).forEach(([plan, count]) => {
      console.log(`   - "${plan}": ${count} usuários`);
    });
    
    console.log('\n' + '=' * 60 + '\n');
    
    // 5. Identificar usuários que DEVERIAM aparecer como assinantes
    console.log('🎯 5. IDENTIFICANDO USUÁRIOS COM ASSINATURA:');
    
    const possibleSubscribers = allUsers.filter(user => {
      return user.subscription_status && 
             user.subscription_status.trim() !== '' && 
             user.subscription_status !== 'null';
    });
    
    console.log(`\n✅ Usuários com subscription_status preenchido: ${possibleSubscribers.length}`);
    
    if (possibleSubscribers.length > 0) {
      possibleSubscribers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} - Status: "${user.subscription_status}"`);
      });
    }
    
    const possibleSubscribersWithPlan = allUsers.filter(user => {
      return user.subscription_plan && 
             user.subscription_plan.trim() !== '' && 
             user.subscription_plan !== 'null';
    });
    
    console.log(`\n✅ Usuários com subscription_plan preenchido: ${possibleSubscribersWithPlan.length}`);
    
    if (possibleSubscribersWithPlan.length > 0) {
      possibleSubscribersWithPlan.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} - Plano: "${user.subscription_plan}"`);
      });
    }
    
    console.log('\n' + '=' * 60 + '\n');
    
    // 6. Gerar query correta baseada nos dados reais
    console.log('🔧 6. GERANDO QUERY CORRETA:');
    
    const validStatuses = [...new Set(allUsers
      .map(u => u.subscription_status)
      .filter(status => status && status.trim() !== '')
    )];
    
    const validPlans = [...new Set(allUsers
      .map(u => u.subscription_plan)
      .filter(plan => plan && plan.trim() !== '')
    )];
    
    console.log('\n📋 Status válidos encontrados:', validStatuses);
    console.log('📋 Planos válidos encontrados:', validPlans);
    
    // Testar a query que deveria funcionar
    console.log('\n🧪 Testando query baseada nos dados encontrados:');
    
    if (validStatuses.length > 0) {
      const testQuery = await prisma.user.findMany({
        where: {
          subscription_status: {
            in: validStatuses
          }
        }
      });
      console.log(`✅ Query por status encontrou: ${testQuery.length} usuários`);
    }
    
    if (validPlans.length > 0) {
      const testQueryPlan = await prisma.user.findMany({
        where: {
          subscription_plan: {
            in: validPlans
          }
        }
      });
      console.log(`✅ Query por plano encontrou: ${testQueryPlan.length} usuários`);
    }
    
    console.log('\n' + '=' * 60 + '\n');
    
    // 7. Gerar código de correção
    console.log('💻 7. CÓDIGO DE CORREÇÃO GERADO:');
    
    const correctionCode = generateCorrectionCode(validStatuses, validPlans, allUsers);
    
    require('fs').writeFileSync('database-correction.js', correctionCode);
    console.log('✅ Código salvo em: database-correction.js');
    
    return {
      totalUsers,
      validStatuses,
      validPlans,
      allUsers,
      possibleSubscribers: possibleSubscribers.length,
      possibleSubscribersWithPlan: possibleSubscribersWithPlan.length
    };
    
  } catch (error) {
    console.error('❌ Erro na inspeção:', error);
    return null;
  } finally {
    await prisma.$disconnect();
  }
}

function generateCorrectionCode(validStatuses, validPlans, allUsers) {
  return `
// CÓDIGO DE CORREÇÃO BASEADO NOS DADOS REAIS DO BANCO
// Gerado automaticamente em ${new Date().toLocaleString()}

// DADOS ENCONTRADOS:
// - Total de usuários: ${allUsers.length}
// - Status válidos: [${validStatuses.map(s => `"${s}"`).join(', ')}]
// - Planos válidos: [${validPlans.map(p => `"${p}"`).join(', ')}]

// SUBSTITUIR em server/routes.ts:

app.get('/api/admin/subscription-users', isAdmin, async (req, res) => {
  try {
    console.log('🔍 Buscando usuários com assinatura - DADOS REAIS...');
    
    const users = await prisma.user.findMany({
      where: {
        OR: [
          ${validStatuses.length > 0 ? `{
            subscription_status: {
              in: [${validStatuses.map(s => `"${s}"`).join(', ')}]
            }
          },` : ''}
          ${validPlans.length > 0 ? `{
            subscription_plan: {
              in: [${validPlans.map(p => `"${p}"`).join(', ')}]
            }
          },` : ''}
          // Fallback: qualquer status não nulo
          {
            subscription_status: {
              not: null,
              not: ""
            }
          }
        ]
      },
      select: {
        id: true,
        email: true,
        subscription_status: true,
        subscription_plan: true,
        subscription_start_date: true,
        subscription_end_date: true,
        createdAt: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(\`✅ Usuários encontrados: \${users.length}\`);
    
    res.json({
      success: true,
      users: users,
      total: users.length,
      debug: {
        searchedStatuses: [${validStatuses.map(s => `"${s}"`).join(', ')}],
        searchedPlans: [${validPlans.map(p => `"${p}"`).join(', ')}],
        totalInDB: ${allUsers.length}
      }
    });
    
  } catch (error) {
    console.error('❌ Erro ao buscar usuários:', error);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      debug: error.message
    });
  }
});

app.get('/api/admin/subscription-metrics', isAdmin, async (req, res) => {
  try {
    const totalUsers = await prisma.user.count();
    
    const subscribedUsers = await prisma.user.count({
      where: {
        OR: [
          ${validStatuses.length > 0 ? `{
            subscription_status: {
              in: [${validStatuses.map(s => `"${s}"`).join(', ')}]
            }
          },` : ''}
          ${validPlans.length > 0 ? `{
            subscription_plan: {
              in: [${validPlans.map(p => `"${p}"`).join(', ')}]
            }
          },` : ''}
          {
            subscription_status: {
              not: null,
              not: ""
            }
          }
        ]
      }
    });
    
    const conversionRate = totalUsers > 0 ? 
      Math.round((subscribedUsers / totalUsers) * 100) : 0;
    
    res.json({
      success: true,
      metrics: {
        totalUsers: totalUsers,
        activeSubscriptions: subscribedUsers,
        trialSubscriptions: 0,
        premiumUsers: subscribedUsers,
        conversionRate: \`\${conversionRate}%\`,
        monthlyRevenue: subscribedUsers * 29.90,
        recentSignups: 0
      },
      debug: {
        realDataUsed: true,
        statusesFound: [${validStatuses.map(s => `"${s}"`).join(', ')}],
        plansFound: [${validPlans.map(p => `"${p}"`).join(', ')}]
      }
    });
    
  } catch (error) {
    console.error('❌ Erro ao calcular métricas:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao carregar métricas'
    });
  }
});

// COMO APLICAR:
// 1. Copie o código acima
// 2. Substitua as rotas em server/routes.ts
// 3. Reinicie o servidor: npm run dev
// 4. Teste o dashboard
`;
}

async function main() {
  console.log('🚀 INSPEÇÃO COMPLETA DO BANCO DE DADOS\n');
  console.log('Objetivo: Descobrir exatamente que dados existem\n');
  
  const result = await inspectDatabase();
  
  if (result) {
    console.log('\n🎯 RESUMO DA INSPEÇÃO:');
    console.log(`📊 Total de usuários: ${result.totalUsers}`);
    console.log(`✅ Status válidos: ${result.validStatuses.length}`);
    console.log(`✅ Planos válidos: ${result.validPlans.length}`);
    console.log(`👥 Possíveis assinantes (por status): ${result.possibleSubscribers}`);
    console.log(`👥 Possíveis assinantes (por plano): ${result.possibleSubscribersWithPlan}`);
    
    console.log('\n💡 PRÓXIMOS PASSOS:');
    console.log('1. Revisar os dados mostrados acima');
    console.log('2. Usar o código em database-correction.js');
    console.log('3. Aplicar a correção nas rotas');
    console.log('4. Testar o dashboard');
  }
}

if (require.main === module) {
  main();
}

module.exports = { inspectDatabase };