Estrutura de Arquivos
Vamos organizar o projeto da seguinte forma:
.
├── index.js                 # Ponto de entrada principal
├── auth-server.js           # Servidor de autenticação com Hotmart
├── sync-service.js          # Serviço de sincronização de dados
├── api-server.js            # API para o frontend
├── schema.prisma            # Esquema do banco de dados
├── .env                     # Variáveis de ambiente
└── public/                  # Pasta para arquivos estáticos do frontend
    ├── index.html
    ├── assets/
    └── ...
3. Configuração do package.json
Primeiro, vamos configurar as dependências necessárias. No terminal do Replit, execute:
bashnpm init -y
npm install express axios cors jsonwebtoken dotenv node-cron @prisma/client
npm install -D prisma
Agora, edite o arquivo package.json para adicionar os scripts:
json{
  "name": "hotmart-integration",
  "version": "1.0.0",
  "description": "Integração com Hotmart via API direta",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev"
  },
  "dependencies": {
    "@prisma/client": "^5.0.0",
    "axios": "^1.4.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "node-cron": "^3.0.2"
  },
  "devDependencies": {
    "prisma": "^5.0.0"
  }
}
4. Configuração do Prisma
Crie o arquivo schema.prisma com o esquema que forneci anteriormente. No Replit, usaremos o SQLite em vez de PostgreSQL para simplificar:
prisma// schema.prisma
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// O restante do schema permanece igual ao fornecido anteriormente
Execute os comandos do Prisma:
bashnpx prisma generate
npx prisma migrate dev --name init
5. Arquivo Principal (index.js)
Este arquivo será responsável por iniciar todos os serviços:
javascript// index.js
require('dotenv').config();
const { fork } = require('child_process');
const express = require('express');
const path = require('path');

// Porta principal para o serviço combinado
const PORT = process.env.PORT || 3000;

// Iniciar o servidor de autenticação (em processo separado)
const authServer = fork('./auth-server.js');

// Iniciar o serviço de sincronização (em processo separado)
const syncService = fork('./sync-service.js');

// Servidor principal (API + arquivos estáticos)
const app = express();

// Redirecionar solicitações para API
app.use('/api', require('./api-server'));

// Servir arquivos estáticos
app.use(express.static(path.join(__dirname, 'public')));

// Rota de fallback para SPA
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Iniciar servidor principal
app.listen(PORT, () => {
  console.log(`Servidor principal rodando na porta ${PORT}`);
  console.log(`URL de acesso: https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`);
});

// Lidar com sinais de encerramento
process.on('SIGINT', () => {
  console.log('Encerrando todos os serviços...');
  authServer.kill();
  syncService.kill();
  process.exit(0);
});
6. Modificações para o Replit
Para auth-server.js
javascript// auth-server.js
// (Mesmo código fornecido anteriormente, mas adaptado para Replit)
const express = require('express');
const axios = require('axios');
const { PrismaClient } = require('@prisma/client');
const cors = require('cors');
require('dotenv').config();

const app = express();
const prisma = new PrismaClient();

// Middlewares
app.use(cors());
app.use(express.json());

// Configuração da API Hotmart
const HOTMART_BASE_URL = 'https://api-sec-vlc.hotmart.com';
const HOTMART_CLIENT_ID = process.env.HOTMART_CLIENT_ID;
const HOTMART_CLIENT_SECRET = process.env.HOTMART_CLIENT_SECRET;

// Cache para o token
let accessTokenCache = {
  token: null,
  expiresAt: 0
};

// Função para obter token de acesso
async function getAccessToken() {
  // (mesmo código anterior)
}

// Rotas como no exemplo anterior
// ...

// No Replit, não precisamos iniciar um servidor HTTP separado
// O módulo será utilizado pelo index.js
module.exports = app;

// Manter o módulo ativo para evitar que o processo filho seja encerrado
setInterval(() => {
  console.log('[auth-server] Mantendo o serviço ativo');
}, 60000);
Para sync-service.js
javascript// sync-service.js
// (Adaptações para o Replit)
const axios = require('axios');
const { PrismaClient } = require('@prisma/client');
const cron = require('node-cron');
require('dotenv').config();

const prisma = new PrismaClient();
const API_BASE_URL = process.env.API_BASE_URL || `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`;

// Resto do código igual ao fornecido anteriormente

// Modificar o intervalo para 30 minutos para evitar consumo excessivo
// no plano gratuito do Replit
cron.schedule('*/30 * * * *', syncTransactions);

// Também executar uma vez após 1 minuto da inicialização
setTimeout(syncTransactions, 60000);

// Manter o processo ativo
setInterval(() => {
  console.log('[sync-service] Mantendo o serviço ativo');
}, 60000);

console.log(`Serviço de sincronização iniciado. Verificando a cada 30 minutos.`);
Para api-server.js
javascript// api-server.js
// (Adaptações para o Replit)
const express = require('express');
const { PrismaClient } = require('@prisma/client');
const jwt = require('jsonwebtoken');
const cors = require('cors');
require('dotenv').config();

const router = express.Router();
const prisma = new PrismaClient();

// Middlewares
router.use(cors());
router.use(express.json());

// Resto do código igual ao fornecido anteriormente,
// mas usando router em vez de app

// No final, exportar o router ao invés de iniciar um servidor
module.exports = router;
7. Configuração do .env
Crie um arquivo .env no diretório raiz do seu projeto:
# Configuração da Hotmart
HOTMART_CLIENT_ID="seu_client_id_aqui"
HOTMART_CLIENT_SECRET="seu_client_secret_aqui"

# Configuração do JWT
JWT_SECRET="um_segredo_muito_forte_para_jwt"

# URL base para API - será preenchido automaticamente no Replit
API_BASE_URL=""
8. Frontend Básico
Crie uma pasta public e adicione um arquivo index.html básico:
html<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DesignAuto - Integração Hotmart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      margin: 0;
      padding: 20px;
      background-color: #f4f7fa;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    h1 {
      color: #333;
      margin-bottom: 20px;
    }
    .login-form {
      margin-bottom: 20px;
    }
    input {
      padding: 10px;
      width: 100%;
      margin-bottom: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    button {
      background: #007bff;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background: #0056b3;
    }
    .user-info {
      margin-top: 20px;
      padding: 15px;
      background: #e9f7fe;
      border-radius: 4px;
    }
    .error {
      color: red;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>DesignAuto - Portal do Assinante</h1>
    
    <div id="login-section">
      <h2>Acesse sua conta</h2>
      <div class="login-form">
        <div id="error" class="error"></div>
        <input type="email" id="email" placeholder="Digite seu e-mail de cadastro" required>
        <button id="login-btn">Acessar</button>
      </div>
    </div>
    
    <div id="user-section" style="display: none;">
      <h2>Bem-vindo, <span id="user-name"></span>!</h2>
      <div id="subscription-info" class="user-info">
        Carregando informações da assinatura...
      </div>
      <button id="logout-btn" style="margin-top: 20px; background: #dc3545;">Sair</button>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const loginSection = document.getElementById('login-section');
      const userSection = document.getElementById('user-section');
      const emailInput = document.getElementById('email');
      const loginBtn = document.getElementById('login-btn');
      const logoutBtn = document.getElementById('logout-btn');
      const userName = document.getElementById('user-name');
      const subscriptionInfo = document.getElementById('subscription-info');
      const errorDiv = document.getElementById('error');
      
      // Verificar se já existe um token
      const token = localStorage.getItem('token');
      if (token) {
        checkSubscription();
      }
      
      // Login
      loginBtn.addEventListener('click', async function() {
        const email = emailInput.value.trim();
        if (!email) {
          errorDiv.textContent = 'Por favor, informe seu e-mail.';
          return;
        }
        
        try {
          errorDiv.textContent = '';
          loginBtn.disabled = true;
          loginBtn.textContent = 'Verificando...';
          
          const response = await fetch('/api/auth', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email })
          });
          
          const data = await response.json();
          
          if (!response.ok) {
            throw new Error(data.error || 'Erro ao realizar login');
          }
          
          // Salvar token
          localStorage.setItem('token', data.token);
          
          // Mostrar dados do usuário
          displayUserInfo(data.user);
          
          // Alternar seções
          loginSection.style.display = 'none';
          userSection.style.display = 'block';
          
        } catch (error) {
          errorDiv.textContent = error.message;
        } finally {
          loginBtn.disabled = false;
          loginBtn.textContent = 'Acessar';
        }
      });
      
      // Logout
      logoutBtn.addEventListener('click', function() {
        localStorage.removeItem('token');
        loginSection.style.display = 'block';
        userSection.style.display = 'none';
        emailInput.value = '';
      });
      
      // Verificar assinatura
      async function checkSubscription() {
        try {
          const token = localStorage.getItem('token');
          
          if (!token) {
            return;
          }
          
          const userResponse = await fetch('/api/user', {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (!userResponse.ok) {
            if (userResponse.status === 401) {
              // Token inválido
              localStorage.removeItem('token');
              return;
            }
            throw new Error('Erro ao obter dados do usuário');
          }
          
          const userData = await userResponse.json();
          
          // Mostrar dados do usuário
          displayUserInfo(userData);
          
          // Alternar seções
          loginSection.style.display = 'none';
          userSection.style.display = 'block';
          
        } catch (error) {
          console.error('Erro:', error);
        }
      }
      
      // Exibir informações do usuário
      function displayUserInfo(user) {
        userName.textContent = user.name;
        
        if (user.subscriptions && user.subscriptions.length > 0) {
          const sub = user.subscriptions[0];
          const expiryDate = new Date(sub.expiryDate).toLocaleDateString('pt-BR');
          
          subscriptionInfo.innerHTML = `
            <p><strong>Status:</strong> Ativo</p>
            <p><strong>Plano:</strong> ${sub.plan}</p>
            <p><strong>Válido até:</strong> ${expiryDate}</p>
          `;
        } else {
          subscriptionInfo.innerHTML = `
            <p><strong>Status:</strong> Sem assinatura ativa</p>
            <p>Para acessar o conteúdo, você precisa adquirir uma assinatura.</p>
            <a href="https://app-hotmart.com/produto/seu-produto" target="_blank" 
               style="display: inline-block; margin-top: 10px; background: #28a745; color: white; 
                      padding: 8px 12px; text-decoration: none; border-radius: 4px;">
              Assinar agora
            </a>
          `;
        }
      }
    });
  </script>
</body>
</html>