Para garantir que apenas a mensagem de erro seja exibida no front-end e não o JSON completo, você precisa formatar a resposta de erro do servidor para garantir que o JSON seja manipulado corretamente. O processo envolve dois passos principais: alterar a resposta do servidor para que ele envie apenas a mensagem de erro, e modificar o front-end para exibir essa mensagem de maneira adequada.

1. Alterando o backend (servidor)
No servidor, ao retornar um erro, em vez de retornar o JSON completo (com "title", "message", etc.), retorne apenas a mensagem de erro. Aqui está um exemplo básico de como você pode fazer isso:

Exemplo de resposta de erro no back-end (Node.js/Express):
javascript
Copiar
app.post('/login', (req, res) => {
  // Lógica para login
  if (loginFail) {
    // Envia apenas a mensagem no corpo da resposta, sem JSON adicional
    return res.status(401).json({ message: 'Senha incorreta' });
  }
  
  // Lógica de sucesso...
});
No exemplo acima, o servidor responde com somente a mensagem de erro ('Senha incorreta') em vez de um JSON completo.

2. Alterando o front-end para exibir apenas a mensagem
No lado do cliente, você precisa garantir que está acessando e exibindo a mensagem de erro, sem mostrar a estrutura JSON.

Exemplo de manipulação do erro no front-end (JavaScript):
javascript
Copiar
// Fazendo a requisição para o back-end
fetch('/login', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ email: email, password: password })
})
.then(response => response.json())
.then(data => {
  if (data.message) {
    // Exibe apenas a mensagem de erro, sem o JSON completo
    showErrorMessage(data.message);
  }
})
.catch(error => {
  console.error('Erro:', error);
});

function showErrorMessage(message) {
  const errorMessageElement = document.querySelector('.error-message');
  errorMessageElement.textContent = message;
  errorMessageElement.style.display = 'block';
}
Explicação:
fetch(): Realiza a requisição POST para o servidor.

response.json(): Converte a resposta JSON do servidor em um objeto JavaScript.

data.message: Acessa a mensagem de erro do JSON.

showErrorMessage(): Exibe a mensagem no front-end, sem mostrar o JSON inteiro.

3. Exibição da mensagem de erro no front-end
Certifique-se de que o componente HTML onde a mensagem de erro será exibida tenha o estilo correto para ocultar o JSON e exibir apenas o texto da mensagem.

Exemplo de HTML e CSS:
html
Copiar
<div class="error-message" style="display:none; color: red;">
  <!-- Mensagem de erro será inserida aqui -->
</div>
Resumo:
Backend: Envie apenas a mensagem de erro, sem incluir o JSON completo, ao retornar uma falha (ex.: res.status(401).json({ message: 'Senha incorreta' })).

Frontend: Quando receber a resposta do backend, extraia a mensagem de erro e exiba-a de maneira clara na interface do usuário, sem mostrar a estrutura JSON.