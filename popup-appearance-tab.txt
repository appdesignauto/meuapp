              <TabsContent value="appearance" className="space-y-4">
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="space-y-6">
                    <div>
                      <Label>Cores</Label>
                      <div className="grid grid-cols-2 gap-4 mt-2">
                        <div>
                          <Label htmlFor="backgroundColor" className="text-xs">Fundo</Label>
                          <div className="flex mt-1">
                            <div
                              className="w-10 h-10 border rounded-l flex items-center justify-center cursor-pointer"
                              style={{ backgroundColor: formValues.backgroundColor }}
                              onClick={() => setColorPickerOpen(colorPickerOpen === 'backgroundColor' ? null : 'backgroundColor')}
                            ></div>
                            <Input
                              id="backgroundColor"
                              name="backgroundColor"
                              value={formValues.backgroundColor}
                              onChange={handleInputChange}
                              className="rounded-l-none"
                            />
                          </div>
                          {colorPickerOpen === 'backgroundColor' && (
                            <div className="absolute z-10 mt-1">
                              <HexColorPicker
                                color={formValues.backgroundColor}
                                onChange={(color) => handleColorChange('backgroundColor', color)}
                              />
                            </div>
                          )}
                        </div>
                        
                        <div>
                          <Label htmlFor="textColor" className="text-xs">Texto</Label>
                          <div className="flex mt-1">
                            <div
                              className="w-10 h-10 border rounded-l flex items-center justify-center cursor-pointer"
                              style={{ backgroundColor: formValues.textColor }}
                              onClick={() => setColorPickerOpen(colorPickerOpen === 'textColor' ? null : 'textColor')}
                            ></div>
                            <Input
                              id="textColor"
                              name="textColor"
                              value={formValues.textColor}
                              onChange={handleInputChange}
                              className="rounded-l-none"
                            />
                          </div>
                          {colorPickerOpen === 'textColor' && (
                            <div className="absolute z-10 mt-1">
                              <HexColorPicker
                                color={formValues.textColor}
                                onChange={(color) => handleColorChange('textColor', color)}
                              />
                            </div>
                          )}
                        </div>
                        
                        <div>
                          <Label htmlFor="buttonColor" className="text-xs">Fundo do botão</Label>
                          <div className="flex mt-1">
                            <div
                              className="w-10 h-10 border rounded-l flex items-center justify-center cursor-pointer"
                              style={{ backgroundColor: formValues.buttonColor }}
                              onClick={() => setColorPickerOpen(colorPickerOpen === 'buttonColor' ? null : 'buttonColor')}
                            ></div>
                            <Input
                              id="buttonColor"
                              name="buttonColor"
                              value={formValues.buttonColor}
                              onChange={handleInputChange}
                              className="rounded-l-none"
                            />
                          </div>
                          {colorPickerOpen === 'buttonColor' && (
                            <div className="absolute z-10 mt-1">
                              <HexColorPicker
                                color={formValues.buttonColor}
                                onChange={(color) => handleColorChange('buttonColor', color)}
                              />
                            </div>
                          )}
                        </div>
                        
                        <div>
                          <Label htmlFor="buttonTextColor" className="text-xs">Texto do botão</Label>
                          <div className="flex mt-1">
                            <div
                              className="w-10 h-10 border rounded-l flex items-center justify-center cursor-pointer"
                              style={{ backgroundColor: formValues.buttonTextColor }}
                              onClick={() => setColorPickerOpen(colorPickerOpen === 'buttonTextColor' ? null : 'buttonTextColor')}
                            ></div>
                            <Input
                              id="buttonTextColor"
                              name="buttonTextColor"
                              value={formValues.buttonTextColor}
                              onChange={handleInputChange}
                              className="rounded-l-none"
                            />
                          </div>
                          {colorPickerOpen === 'buttonTextColor' && (
                            <div className="absolute z-10 mt-1">
                              <HexColorPicker
                                color={formValues.buttonTextColor}
                                onChange={(color) => handleColorChange('buttonTextColor', color)}
                              />
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    {/* Adicionando o componente de customização de botão */}
                    <ButtonCustomization 
                      buttonRadius={buttonRadius}
                      buttonWidth={buttonWidth}
                      onRadiusChange={handleRadiusChange}
                      onWidthChange={handleWidthChange}
                    />
                    
                    {/* Prévia do botão */}
                    {formValues.buttonText && (
                      <div className="mt-4">
                        <Label className="mb-2 block">Prévia do botão</Label>
                        <div 
                          className="p-4 border rounded-md flex items-center justify-center"
                          style={{ backgroundColor: '#f9f9f9' }}
                        >
                          <button
                            style={{
                              backgroundColor: formValues.buttonColor,
                              color: formValues.buttonTextColor,
                              padding: '8px 16px',
                              borderRadius: `${buttonRadius}px`,
                              width: buttonWidth,
                              border: 'none',
                              cursor: 'pointer',
                              fontWeight: 500,
                              transition: 'transform 0.1s ease',
                            }}
                            className="hover:opacity-90 active:scale-[0.98]"
                          >
                            {formValues.buttonText}
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="position">Posição</Label>
                      <Select
                        value={formValues.position}
                        onValueChange={(value) => handleSelectChange('position', value)}
                      >
                        <SelectTrigger id="position">
                          <SelectValue placeholder="Selecione a posição" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="center">Centro</SelectItem>
                          <SelectItem value="top-left">Superior esquerdo</SelectItem>
                          <SelectItem value="top-right">Superior direito</SelectItem>
                          <SelectItem value="bottom-left">Inferior esquerdo</SelectItem>
                          <SelectItem value="bottom-right">Inferior direito</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label htmlFor="size">Tamanho</Label>
                      <Select
                        value={formValues.size}
                        onValueChange={(value) => handleSelectChange('size', value)}
                      >
                        <SelectTrigger id="size">
                          <SelectValue placeholder="Selecione o tamanho" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="small">Pequeno</SelectItem>
                          <SelectItem value="medium">Médio</SelectItem>
                          <SelectItem value="large">Grande</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label htmlFor="animation">Animação</Label>
                      <Select
                        value={formValues.animation}
                        onValueChange={(value) => handleSelectChange('animation', value)}
                      >
                        <SelectTrigger id="animation">
                          <SelectValue placeholder="Selecione a animação" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="fade">Fade (desvanecer)</SelectItem>
                          <SelectItem value="slide">Slide (deslizar)</SelectItem>
                          <SelectItem value="zoom">Zoom</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label htmlFor="delay">Atraso para exibição (segundos)</Label>
                      <Input
                        id="delay"
                        name="delay"
                        type="number"
                        min="0"
                        step="1"
                        value={formValues.delay}
                        onChange={handleInputChange}
                      />
                    </div>
                  </div>
                </div>
              </TabsContent>