generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model analyticsSettings {
  id                   Int       @id @default(autoincrement())
  metaPixelId          String?
  metaAdsEnabled       Boolean?  @default(false)
  metaAdsAccessToken   String?
  ga4MeasurementId     String?
  ga4ApiSecret         String?
  gtmContainerId       String?
  clarityProjectId     String?
  hotjarSiteId         String?
  linkedinPartnerId    String?
  tiktokPixelId        String?
  amplitudeApiKey      String?
  mixpanelToken        String?
  metaPixelEnabled     Boolean?  @default(false)
  ga4Enabled           Boolean?  @default(false)
  gtmEnabled           Boolean?  @default(false)
  clarityEnabled       Boolean?  @default(false)
  hotjarEnabled        Boolean?  @default(false)
  linkedinEnabled      Boolean?  @default(false)
  tiktokEnabled        Boolean?  @default(false)
  amplitudeEnabled     Boolean?  @default(false)
  mixpanelEnabled      Boolean?  @default(false)
  trackPageviews       Boolean?  @default(true)
  trackClicks          Boolean?  @default(false)
  trackFormSubmissions Boolean?  @default(false)
  trackArtsViewed      Boolean?  @default(true)
  trackArtsDownloaded  Boolean?  @default(true)
  updatedAt            DateTime? @default(now()) @db.Timestamptz(6)
  customScriptHead     String?
  customScriptBody     String?
  customScriptEnabled  Boolean?  @default(false)
  createdAt            DateTime? @default(now()) @db.Timestamptz(6)
  updatedBy            Int?
}

model app_config {
  id                                 Int      @id @default(autoincrement())
  name                               String   @default("DesignAuto")
  short_name                         String   @default("DesignAuto")
  theme_color                        String   @default("#4F46E5")
  background_color                   String   @default("#FFFFFF")
  icon_192                           String   @default("/icons/icon-192.png")
  icon_512                           String   @default("/icons/icon-512.png")
  created_at                         DateTime @default(now()) @db.Timestamp(6)
  updated_at                         DateTime @default(now()) @db.Timestamp(6)
  created_by                         Int?
  updated_by                         Int?
  users_app_config_created_byTousers users?   @relation("app_config_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_app_config_updated_byTousers users?   @relation("app_config_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model artGroups {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar(255)
  description   String?
  ispremium     Boolean?        @default(false)
  designerid    Int?
  categoryid    Int?
  isvisible     Boolean?        @default(true)
  status        String?         @default("active") @db.VarChar(50)
  downloadcount Int?            @default(0)
  viewcount     Int?            @default(0)
  likecount     Int?            @default(0)
  createdat     DateTime?       @default(now()) @db.Timestamp(6)
  updatedat     DateTime?       @default(now()) @db.Timestamp(6)
  categories    categories?     @relation(fields: [categoryid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?          @relation(fields: [designerid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  artVariations artVariations[]

  @@index([categoryid], map: "idx_artgroups_categoryid")
  @@index([designerid], map: "idx_artgroups_designerid")
  @@index([ispremium], map: "idx_artgroups_ispremium")
  @@index([isvisible], map: "idx_artgroups_isvisible")
}

model artVariations {
  id          Int        @id @default(autoincrement())
  groupid     Int?
  artid       Int?
  formatid    Int?
  filetypeid  Int?
  imageurl    String
  editurl     String?
  width       Int?
  height      Int?
  aspectratio String?    @db.VarChar(20)
  isprimary   Boolean?   @default(false)
  createdat   DateTime?  @default(now()) @db.Timestamp(6)
  updatedat   DateTime?  @default(now()) @db.Timestamp(6)
  arts        arts?      @relation(fields: [artid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  fileTypes   fileTypes? @relation(fields: [filetypeid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  formats     formats?   @relation(fields: [formatid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  artGroups   artGroups? @relation(fields: [groupid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([artid], map: "idx_artvariations_artid")
  @@index([filetypeid], map: "idx_artvariations_filetypeid")
  @@index([formatid], map: "idx_artvariations_formatid")
  @@index([groupid], map: "idx_artvariations_groupid")
  @@index([isprimary], map: "idx_artvariations_isprimary")
}

model arts {
  id            Int             @id @default(autoincrement())
  title         String
  imageUrl      String
  format        String
  fileType      String
  editUrl       String
  isPremium     Boolean         @default(false)
  categoryId    Int
  collectionId  Int
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @db.Timestamp(6)
  designerid    Int?
  viewcount     Int             @default(0)
  width         Int?
  height        Int?
  aspectratio   String?
  downloadCount Int?            @default(0)
  isVisible     Boolean         @default(true)
  groupId       String?
  artVariations artVariations[]
  categories    categories      @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "arts_categoryId_categories_id_fk")
  collections   collections     @relation(fields: [collectionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "arts_collectionId_collections_id_fk")
  users         users?          @relation(fields: [designerid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  designerStats designerStats[]
  downloads     downloads[]
  favorites     favorites[]
  reports       reports[]
  shares        shares[]
  views         views[]
}

model categories {
  id        Int         @id @default(autoincrement())
  name      String
  slug      String      @unique(map: "categories_slug_unique")
  artGroups artGroups[]
  arts      arts[]
}

model collections {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  artCount    Int      @default(0)
  formats     String
  isPremium   Boolean  @default(false)
  updatedAt   DateTime @default(now()) @db.Timestamp(6)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  arts        arts[]
}

model communityCommentLikes {
  id                Int               @id @default(autoincrement())
  commentId         Int
  userId            Int
  createdAt         DateTime          @default(now()) @db.Timestamp(6)
  updatedAt         DateTime          @default(now()) @db.Timestamp(6)
  communityComments communityComments @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([commentId, userId])
}

model communityComments {
  id                      Int                     @id @default(autoincrement())
  postId                  Int
  userId                  Int
  content                 String
  isHidden                Boolean                 @default(false)
  createdAt               DateTime                @default(now()) @db.Timestamp(6)
  updatedAt               DateTime                @default(now()) @db.Timestamp(6)
  parentId                Int?
  communityCommentLikes   communityCommentLikes[]
  communityComments       communityComments?      @relation("communityCommentsTocommunityComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_communityComments communityComments[]     @relation("communityCommentsTocommunityComments")
  communityPosts          communityPosts          @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communityComments_postId_communityPosts_id_fk")
  users                   users                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communityComments_userId_users_id_fk")
}

model communityLeaderboard {
  id            Int      @default(autoincrement())
  userId        Int
  totalPoints   Int      @default(0)
  postCount     Int      @default(0)
  likesReceived Int      @default(0)
  savesReceived Int      @default(0)
  featuredCount Int      @default(0)
  period        String
  rank          Int      @default(0)
  level         String   @default("Iniciante KDG")
  lastUpdated   DateTime @default(now()) @db.Timestamp(6)
  users         users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, period])
}

model communityLikes {
  id             Int            @default(autoincrement())
  postId         Int
  userId         Int
  createdAt      DateTime       @default(now()) @db.Timestamp(6)
  updatedAt      DateTime       @default(now()) @db.Timestamp(6)
  communityPosts communityPosts @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, userId])
}

model communityPoints {
  id        Int      @id @default(autoincrement())
  userId    Int
  points    Int
  reason    String
  sourceId  Int?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  period    String
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model communityPosts {
  id                Int                 @id @default(autoincrement())
  userId            Int
  title             String
  content           String
  imageUrl          String?
  status            String              @default("pending")
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  editLink          String?
  viewCount         Int                 @default(0)
  featuredUntil     DateTime?           @db.Timestamp(6)
  isWeeklyFeatured  Boolean             @default(false)
  isPinned          Boolean             @default(false)
  communityComments communityComments[]
  communityLikes    communityLikes[]
  users             users               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communityPosts_userId_users_id_fk")
  communitySaves    communitySaves[]
}

model communitySaves {
  id             Int            @default(autoincrement())
  postId         Int
  userId         Int
  createdAt      DateTime       @default(now()) @db.Timestamp(6)
  updatedAt      DateTime       @default(now()) @db.Timestamp(6)
  communityPosts communityPosts @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, userId])
}

model communitySettings {
  id                      Int      @id @default(autoincrement())
  pointsForPost           Int      @default(20)
  pointsForLike           Int      @default(5)
  pointsForSave           Int      @default(10)
  pointsForWeeklyFeatured Int      @default(50)
  prize1stPlace           String   @default("R$ 0")
  prize2ndPlace           String   @default("R$ 0")
  prize3rdPlace           String   @default("R$ 0")
  levelThresholds         Json     @default("{\"Elite KDG\": 5001, \"Lenda KDG\": 10001, \"Destaque KDG\": 2001, \"Iniciante KDG\": 0, \"Colaborador KDG\": 501}")
  requireApproval         Boolean  @default(true)
  allowComments           Boolean  @default(true)
  showRanking             Boolean  @default(true)
  updatedAt               DateTime @default(now()) @db.Timestamp(6)
  updatedBy               Int?
  users                   users?   @relation(fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model courseLessons {
  id                     Int              @id @default(autoincrement())
  moduleId               Int
  title                  String
  description            String
  videoUrl               String
  videoProvider          String
  duration               Int?
  thumbnailUrl           String?
  order                  Int
  isPremium              Boolean          @default(false)
  additionalMaterialsUrl String?
  createdBy              Int
  createdAt              DateTime         @default(now()) @db.Timestamp(6)
  updatedAt              DateTime         @default(now()) @db.Timestamp(6)
  showLessonNumber       Boolean          @default(true)
  viewCount              Int?             @default(0)
  users                  users            @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseModules          courseModules    @relation(fields: [moduleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseProgress         courseProgress[]
  courseRatings          courseRatings[]
  lessonNotes            lessonNotes[]
  lessonViews            lessonViews[]
  videoComments          videoComments[]

  @@index([createdBy], map: "idx_courseLessons_createdBy")
  @@index([moduleId], map: "idx_courseLessons_moduleId")
}

model courseModules {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  thumbnailUrl  String
  level         String          @default("iniciante")
  order         Int
  isActive      Boolean         @default(true)
  isPremium     Boolean         @default(false)
  createdBy     Int
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @db.Timestamp(6)
  courseId      Int?
  courseLessons courseLessons[]
  courses       courses?        @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users           @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([createdBy], map: "idx_courseModules_createdBy")
}

model courseProgress {
  id            Int           @default(autoincrement())
  userId        Int
  lessonId      Int
  progress      Int           @default(0)
  isCompleted   Boolean       @default(false)
  lastWatchedAt DateTime      @default(now()) @db.Timestamp(6)
  notes         String?
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime      @default(now()) @db.Timestamp(6)
  courseLessons courseLessons @relation(fields: [lessonId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, lessonId])
  @@index([lessonId], map: "idx_courseProgress_lessonId")
  @@index([userId], map: "idx_courseProgress_userId")
}

model courseRatings {
  id            Int           @default(autoincrement())
  userId        Int
  lessonId      Int
  rating        Int
  comment       String?
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime      @default(now()) @db.Timestamp(6)
  courseLessons courseLessons @relation(fields: [lessonId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, lessonId])
  @@index([lessonId], map: "idx_courseRatings_lessonId")
  @@index([userId], map: "idx_courseRatings_userId")
}

model courseSettings {
  id                        Int      @id @default(autoincrement())
  bannerTitle               String?
  bannerDescription         String?
  bannerImageUrl            String?
  welcomeMessage            String?
  showModuleNumbers         Boolean? @default(true)
  useCustomPlayerColors     Boolean? @default(false)
  enableComments            Boolean? @default(true)
  allowNonPremiumEnrollment Boolean? @default(false)
  updatedAt                 DateTime @default(now()) @db.Timestamp(6)
  updatedBy                 Int?
  courseId                  Int?
  courses                   courses? @relation(fields: [courseId], references: [id], onUpdate: NoAction)
  users                     users?   @relation(fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model courses {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  slug           String           @unique
  featuredImage  String?
  level          String           @default("iniciante")
  status         String           @default("active")
  isPublished    Boolean          @default(true)
  isPremium      Boolean          @default(false)
  createdBy      Int?
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @db.Timestamp(6)
  courseModules  courseModules[]
  courseSettings courseSettings[]
  users          users?           @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model designerStats {
  id             Int      @id @default(autoincrement())
  userId         Int
  artId          Int
  downloadCount  Int      @default(0)
  viewCount      Int      @default(0)
  favoriteCount  Int      @default(0)
  conversionRate Int      @default(0)
  updatedAt      DateTime @default(now()) @db.Timestamp(6)
  arts           arts     @relation(fields: [artId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "designerStats_artId_arts_id_fk")
  users          users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "designerStats_userId_users_id_fk")
}

model downloads {
  id        Int      @id @default(autoincrement())
  userId    Int
  artId     Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  arts      arts     @relation(fields: [artId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "downloads_artId_arts_id_fk")
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "downloads_userId_users_id_fk")
}

model emailVerificationCodes {
  id        Int       @id @default(autoincrement())
  userId    Int
  email     String
  code      String
  expiresAt DateTime  @db.Timestamp(6)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  usedAt    DateTime? @db.Timestamp(6)
  isUsed    Boolean   @default(false)
  users     users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model failedWebhooks {
  id           Int       @id @default(autoincrement())
  webhookLogId Int?
  source       String    @db.VarChar(50)
  payload      Json
  errorMessage String
  retryCount   Int?      @default(0)
  lastRetryAt  DateTime? @db.Timestamp(6)
  status       String    @default("pending") @db.VarChar(50)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @db.Timestamp(6)

  @@index([source], map: "idx_failed_webhooks_source")
  @@index([status], map: "idx_failed_webhooks_status")
}

model favorites {
  id        Int      @id @default(autoincrement())
  userId    Int
  artId     Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  arts      arts     @relation(fields: [artId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorites_artId_arts_id_fk")
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorites_userId_users_id_fk")
}

model ferramentas {
  id                    Int                   @id @default(autoincrement())
  nome                  String
  descricao             String?
  imageUrl              String?
  websiteUrl            String
  isExterno             Boolean?              @default(true)
  isNovo                Boolean?              @default(false)
  categoriaId           Int
  ordem                 Int?                  @default(0)
  criadoEm              DateTime              @default(now()) @db.Timestamp(6)
  atualizadoEm          DateTime              @default(now()) @db.Timestamp(6)
  ativo                 Boolean?              @default(true)
  isPopular             Boolean               @default(false)
  ferramentasCategorias ferramentasCategorias @relation(fields: [categoriaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ferramentasCategorias {
  id           Int           @id @default(autoincrement())
  nome         String
  slug         String        @unique
  descricao    String?
  icone        String?
  ordem        Int?          @default(0)
  criadoEm     DateTime      @default(now()) @db.Timestamp(6)
  atualizadoEm DateTime      @default(now()) @db.Timestamp(6)
  ativo        Boolean?      @default(true)
  ferramentas  ferramentas[]
}

model fileTypes {
  id            Int             @id @default(autoincrement())
  name          String
  slug          String          @unique(map: "fileTypes_slug_unique")
  artVariations artVariations[]
}

model formats {
  id            Int             @id @default(autoincrement())
  name          String
  slug          String          @unique(map: "formats_slug_unique")
  artVariations artVariations[]
}

model image_storage {
  id                Int       @id @default(autoincrement())
  filename          String    @db.VarChar(255)
  original_filename String?   @db.VarChar(255)
  content_type      String    @db.VarChar(100)
  size              Int
  data              Bytes
  thumbnail         Bytes?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
}

model integrationSettings {
  id          Int       @id @default(autoincrement())
  provider    String
  key         String
  value       String?
  description String?
  isActive    Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @db.Timestamp(6)

  @@unique([provider, key])
}

model lessonNotes {
  id            Int           @id @default(autoincrement())
  userId        Int
  lessonId      Int
  content       String?
  createdAt     DateTime?     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?     @default(now()) @db.Timestamptz(6)
  courseLessons courseLessons @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lesson_notes")
  users         users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_notes")

  @@unique([userId, lessonId])
}

model lessonViews {
  id            Int           @id @default(autoincrement())
  userId        Int
  lessonId      Int
  viewedAt      DateTime?     @default(now()) @db.Timestamptz(6)
  courseLessons courseLessons @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lesson")
  users         users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model popupViews {
  id        Int      @id @default(autoincrement())
  popupId   Int
  userId    Int?
  sessionId String?
  action    String?  @default("view")
  viewedAt  DateTime @default(now()) @db.Timestamp(6)
  popups    popups   @relation(fields: [popupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model popups {
  id                 Int          @id @default(autoincrement())
  title              String?
  content            String?
  imageUrl           String?
  buttonText         String?
  buttonUrl          String?
  backgroundColor    String?      @default("#FFFFFF")
  textColor          String?      @default("#000000")
  buttonColor        String?      @default("#4F46E5")
  buttonTextColor    String?      @default("#FFFFFF")
  position           String?      @default("center")
  size               String?      @default("medium")
  animation          String?      @default("fade")
  startDate          DateTime     @db.Timestamp(6)
  endDate            DateTime     @db.Timestamp(6)
  showOnce           Boolean?     @default(false)
  showToLoggedUsers  Boolean?     @default(true)
  showToGuestUsers   Boolean?     @default(true)
  showToPremiumUsers Boolean?     @default(true)
  frequency          Int?         @default(1)
  delay              Int?         @default(2)
  isActive           Boolean?     @default(true)
  createdBy          Int
  createdAt          DateTime     @default(now()) @db.Timestamp(6)
  updatedAt          DateTime     @default(now()) @db.Timestamp(6)
  buttonradius       Int?         @default(4)
  buttonwidth        String?      @default("auto")
  pages              String[]     @default([])
  userroles          String[]     @default([])
  popupViews         popupViews[]
  users              users        @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reportTypes {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  reports     reports[]
}

model reports {
  id                               Int          @id @default(autoincrement())
  userId                           Int?
  artId                            Int?
  reportTypeId                     Int?
  title                            String
  description                      String
  evidence                         String?
  status                           String       @default("pendente")
  adminResponse                    String?
  respondedBy                      Int?
  respondedAt                      DateTime?    @db.Timestamp(6)
  isResolved                       Boolean      @default(false)
  createdAt                        DateTime     @default(now()) @db.Timestamp(6)
  updatedAt                        DateTime     @default(now()) @db.Timestamp(6)
  resolvedat                       DateTime?    @db.Timestamp(6)
  email                            String?
  whatsapp                         String?
  arts                             arts?        @relation(fields: [artId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reportTypes                      reportTypes? @relation(fields: [reportTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_reports_respondedByTousers users?       @relation("reports_respondedByTousers", fields: [respondedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_reports_userIdTousers      users?       @relation("reports_userIdTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model shares {
  id        Int       @id @default(autoincrement())
  artId     Int
  userId    Int?
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  arts      arts      @relation(fields: [artId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?    @relation(fields: [userId], references: [id], onUpdate: NoAction)
}

model siteSettings {
  id                 Int      @id @default(autoincrement())
  logoUrl            String   @default("/images/logo.png")
  faviconUrl         String   @default("/favicon.ico")
  siteName           String   @default("DesignAuto")
  primaryColor       String   @default("#1e40af")
  footerText         String   @default("© DesignAuto App. Todos os direitos reservados.")
  metaDescription    String   @default("Plataforma de designs automotivos personalizáveis")
  contactEmail       String   @default("contato@designauto.app")
  updatedAt          DateTime @default(now()) @db.Timestamp(6)
  updatedBy          Int?
  courseHeroTitle    String?  @default("DesignAuto Videoaulas")
  courseHeroSubtitle String?  @default("A formação completa para você criar designs profissionais para seu negócio automotivo")
  courseHeroImageUrl String?  @default("https://images.unsplash.com/photo-1617651823081-270acchia626?q=80&w=1970&auto=format&fit=crop")
  courseRating       String?  @default("4.8")
  courseReviewCount  Int?     @default(287)
  courseTotalHours   String?  @default("42 horas")
  courseTotalModules Int?     @default(18)
  users              users?   @relation(fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscriptionSettings {
  id                           Int      @id @default(autoincrement())
  webhookUrl                   String?
  webhookSecretKey             String?
  hotmartEnvironment           String   @default("sandbox")
  hotmartClientId              String?
  hotmartClientSecret          String?
  hotmartBasicPlanId           String?
  hotmartProPlanId             String?
  defaultSubscriptionDuration  Int      @default(12)
  graceHoursAfterExpiration    Int      @default(48)
  autoDowngradeAfterExpiration Boolean  @default(true)
  autoMapProductCodes          Boolean  @default(true)
  sendExpirationWarningDays    Int      @default(3)
  sendExpirationWarningEmails  Boolean  @default(true)
  notificationEmailSubject     String?
  notificationEmailTemplate    String?
  createdAt                    DateTime @default(now()) @db.Timestamp(6)
  updatedAt                    DateTime @default(now()) @db.Timestamp(6)
  doppusClientId               String?
  doppusClientSecret           String?
  doppusSecretKey              String?
}

model subscriptions {
  id                                    Int       @id @default(autoincrement())
  userId                                Int       @unique(map: "subscriptions_userId_unique")
  planType                              String    @default("premium")
  status                                String    @default("active")
  startDate                             DateTime  @default(now()) @db.Timestamp(6)
  endDate                               DateTime? @db.Timestamp(6)
  webhookData                           String?
  createdAt                             DateTime  @default(now()) @db.Timestamp(6)
  updatedAt                             DateTime  @default(now()) @db.Timestamp(6)
  origin                                String    @default("manual")
  transactionid                         String?
  lastevent                             String?
  modifiedby                            Int?
  users_subscriptions_modifiedbyTousers users?    @relation("subscriptions_modifiedbyTousers", fields: [modifiedby], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_subscriptions_userIdTousers     users     @relation("subscriptions_userIdTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscriptions_userId_users_id_fk")
}

model testimonials {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  company   String
  avatarUrl String
  rating    Int
  quote     String
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model userFollows {
  id                                   Int      @id @default(autoincrement())
  followerId                           Int
  followingId                          Int
  createdAt                            DateTime @default(now()) @db.Timestamp(6)
  users_userFollows_followerIdTousers  users    @relation("userFollows_followerIdTousers", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_userFollows_followingIdTousers users    @relation("userFollows_followingIdTousers", fields: [followingId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([followerId, followingId])
}

model userPermissions {
  id                                     Int       @id @default(autoincrement())
  userId                                 Int
  permission                             String
  grantedBy                              Int?
  expiresAt                              DateTime? @db.Timestamp(6)
  createdAt                              DateTime  @default(now()) @db.Timestamp(6)
  users_userPermissions_grantedByTousers users?    @relation("userPermissions_grantedByTousers", fields: [grantedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userPermissions_grantedBy_users_id_fk")
  users_userPermissions_userIdTousers    users     @relation("userPermissions_userIdTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userPermissions_userId_users_id_fk")
}

model userPreferences {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique(map: "userPreferences_userId_unique")
  emailNotifications Boolean  @default(true)
  darkMode           Boolean  @default(false)
  language           String   @default("pt-BR")
  updatedAt          DateTime @default(now()) @db.Timestamp(6)
  users              users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userPreferences_userId_users_id_fk")
}

model userStats {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique(map: "userStats_userId_unique")
  totalDownloads   Int      @default(0)
  totalFavorites   Int      @default(0)
  totalViews       Int      @default(0)
  lastActivityDate DateTime @default(now()) @db.Timestamp(6)
  updatedAt        DateTime @default(now()) @db.Timestamp(6)
  users            users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userStats_userId_users_id_fk")
}

model userfollows {
  id                                   Int       @id @default(autoincrement())
  followerid                           Int
  followingid                          Int
  createdat                            DateTime? @default(now()) @db.Timestamp(6)
  users_userfollows_followeridTousers  users     @relation("userfollows_followeridTousers", fields: [followerid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_userfollows_followingidTousers users     @relation("userfollows_followingidTousers", fields: [followingid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([followerid, followingid])
}

model users {
  id                                               Int                      @id @default(autoincrement())
  username                                         String                   @unique(map: "users_username_unique")
  password                                         String
  role                                             String                   @default("free")
  createdAt                                        DateTime                 @default(now()) @db.Timestamp(6)
  email                                            String?
  name                                             String?
  profileimageurl                                  String?
  bio                                              String?
  isactive                                         Boolean?                 @default(true)
  lastlogin                                        DateTime?                @db.Timestamp(6)
  updatedat                                        DateTime?                @default(now()) @db.Timestamp(6)
  website                                          String?                  @default("")
  followers                                        Int?                     @default(0)
  following                                        Int?                     @default(0)
  location                                         String?                  @default("")
  sociallinks                                      Json?                    @default("{}")
  nivelacesso                                      String                   @default("usuario")
  origemassinatura                                 String?
  tipoplano                                        String?
  dataassinatura                                   DateTime?                @db.Timestamp(6)
  dataexpiracao                                    DateTime?                @db.Timestamp(6)
  acessovitalicio                                  Boolean?                 @default(false)
  observacaoadmin                                  String?
  ultimologin                                      DateTime?                @db.Timestamp(6)
  criadoem                                         DateTime?                @default(now()) @db.Timestamp(6)
  atualizadoem                                     DateTime?                @default(now()) @db.Timestamp(6)
  supabaseId                                       String?                  @unique
  emailconfirmed                                   Boolean?                 @default(false)
  phone                                            String?
  resetpasswordtoken                               String?
  resetpasswordexpires                             DateTime?                @db.Timestamp(6)
  lastresetrequest                                 DateTime?                @db.Timestamp(6)
  hotmartid                                        String?
  doppusid                                         String?
  app_config_app_config_created_byTousers          app_config[]             @relation("app_config_created_byTousers")
  app_config_app_config_updated_byTousers          app_config[]             @relation("app_config_updated_byTousers")
  artGroups                                        artGroups[]
  arts                                             arts[]
  communityCommentLikes                            communityCommentLikes[]
  communityComments                                communityComments[]
  communityLeaderboard                             communityLeaderboard[]
  communityLikes                                   communityLikes[]
  communityPoints                                  communityPoints[]
  communityPosts                                   communityPosts[]
  communitySaves                                   communitySaves[]
  communitySettings                                communitySettings[]
  courseLessons                                    courseLessons[]
  courseModules                                    courseModules[]
  courseProgress                                   courseProgress[]
  courseRatings                                    courseRatings[]
  courseSettings                                   courseSettings[]
  courses                                          courses[]
  designerStats                                    designerStats[]
  downloads                                        downloads[]
  emailVerificationCodes                           emailVerificationCodes[]
  favorites                                        favorites[]
  lessonNotes                                      lessonNotes[]
  lessonViews                                      lessonViews[]
  popupViews                                       popupViews[]
  popups                                           popups[]
  reports_reports_respondedByTousers               reports[]                @relation("reports_respondedByTousers")
  reports_reports_userIdTousers                    reports[]                @relation("reports_userIdTousers")
  shares                                           shares[]
  siteSettings                                     siteSettings[]
  subscriptions_subscriptions_modifiedbyTousers    subscriptions[]          @relation("subscriptions_modifiedbyTousers")
  subscriptions_subscriptions_userIdTousers        subscriptions?           @relation("subscriptions_userIdTousers")
  userFollows_userFollows_followerIdTousers        userFollows[]            @relation("userFollows_followerIdTousers")
  userFollows_userFollows_followingIdTousers       userFollows[]            @relation("userFollows_followingIdTousers")
  userPermissions_userPermissions_grantedByTousers userPermissions[]        @relation("userPermissions_grantedByTousers")
  userPermissions_userPermissions_userIdTousers    userPermissions[]        @relation("userPermissions_userIdTousers")
  userPreferences                                  userPreferences?
  userStats                                        userStats?
  userfollows_userfollows_followeridTousers        userfollows[]            @relation("userfollows_followeridTousers")
  userfollows_userfollows_followingidTousers       userfollows[]            @relation("userfollows_followingidTousers")
  videoComments                                    videoComments[]
  views                                            views[]

  @@index([email], map: "idx_users_email")
  @@index([username], map: "idx_users_username")
}

model videoComments {
  id            Int           @id @default(autoincrement())
  lessonId      Int
  userId        Int
  content       String
  isHidden      Boolean       @default(false)
  likes         Int           @default(0)
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime      @default(now()) @db.Timestamp(6)
  courseLessons courseLessons @relation(fields: [lessonId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videoComments_lessonId_courseLessons_id_fk")
  users         users         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videoComments_userId_users_id_fk")
}

model views {
  id        Int      @id @default(autoincrement())
  userId    Int?
  artId     Int
  sourceIP  String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  arts      arts     @relation(fields: [artId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "views_artId_arts_id_fk")
  users     users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "views_userId_users_id_fk")
}
