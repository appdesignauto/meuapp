/**
 * Script para resolver problemas de configura√ß√£o de armazenamento (R2/Supabase) no deploy
 * 
 * Este script realiza:
 * 1. Verifica√ß√£o de todas as vari√°veis de ambiente necess√°rias
 * 2. Testes de conectividade com Supabase Storage
 * 3. Verifica√ß√£o de rotas de upload
 * 4. Saneamento de refer√™ncias conflitantes entre R2 e Supabase
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const dotenv = require('dotenv');

// Carregar vari√°veis de ambiente
dotenv.config();

console.log('üîç Iniciando diagn√≥stico de configura√ß√£o para deploy...');

// Verificar vari√°veis de ambiente do Supabase
const supabaseVars = {
  SUPABASE_URL: process.env.SUPABASE_URL,
  SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY
};

// Verificar vari√°veis do R2 (mantidas para compatibilidade)
const r2Vars = {
  R2_ACCESS_KEY_ID: process.env.R2_ACCESS_KEY_ID,
  R2_SECRET_ACCESS_KEY: process.env.R2_SECRET_ACCESS_KEY,
  R2_ENDPOINT: process.env.R2_ENDPOINT,
  R2_BUCKET_NAME: process.env.R2_BUCKET_NAME,
  R2_PUBLIC_URL: process.env.R2_PUBLIC_URL
};

// Checar vari√°veis de ambiente cr√≠ticas
let hasErrors = false;

console.log('\nüìã Verificando vari√°veis de ambiente do Supabase:');
Object.entries(supabaseVars).forEach(([key, value]) => {
  if (!value) {
    console.log(`‚ùå ${key}: N√£o definido`);
    hasErrors = true;
  } else {
    const valuePreview = value.length > 10 ? `${value.substring(0, 5)}...${value.substring(value.length - 5)}` : value;
    console.log(`‚úÖ ${key}: ${valuePreview} (${value.length} caracteres)`);
  }
});

console.log('\nüìã Verificando vari√°veis de ambiente do R2 (compatibilidade):');
Object.entries(r2Vars).forEach(([key, value]) => {
  if (!value) {
    console.log(`‚ö†Ô∏è ${key}: N√£o definido (pode ser necess√°rio)`);
  } else {
    const valuePreview = value.length > 10 ? `${value.substring(0, 5)}...${value.substring(value.length - 5)}` : value;
    console.log(`‚úÖ ${key}: ${valuePreview} (${value.length} caracteres)`);
  }
});

// Verificar consist√™ncia das configura√ß√µes de armazenamento nos arquivos
console.log('\nüîç Verificando consist√™ncia da configura√ß√£o de armazenamento...');

const filesToCheck = [
  'server/services/supabase-storage.ts',
  'server/routes/avatar-upload.ts',
  'server/routes/users-profile-image.ts',
  'client/src/components/profile/AvatarUploader.tsx'
];

let foundInconsistencies = false;

filesToCheck.forEach(filePath => {
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Verificar refer√™ncias ao R2 que deveriam ser Supabase
    const r2References = (content.match(/r2/gi) || []).length;
    const supabaseReferences = (content.match(/supabase/gi) || []).length;
    
    console.log(`üìÑ ${filePath}:`);
    console.log(`   - Refer√™ncias ao R2: ${r2References}`);
    console.log(`   - Refer√™ncias ao Supabase: ${supabaseReferences}`);
    
    if (r2References > 0 && supabaseReferences === 0) {
      console.log(`   ‚ö†Ô∏è Arquivo pode estar usando apenas R2 sem Supabase Storage`);
      foundInconsistencies = true;
    }
  } else {
    console.log(`‚ùì Arquivo n√£o encontrado: ${filePath}`);
  }
});

// Verificar se h√° erros graves
if (hasErrors) {
  console.log('\n‚ùå Encontrados problemas cr√≠ticos nas vari√°veis de ambiente');
  console.log('   Execute o script novamente ap√≥s configurar as vari√°veis de ambiente faltantes');
  process.exit(1);
}

// Exibir recomenda√ß√µes
console.log('\nüìã Recomenda√ß√µes para deploy:');

if (foundInconsistencies) {
  console.log('‚ö†Ô∏è Foram encontradas inconsist√™ncias na configura√ß√£o de armazenamento.');
  console.log('   Recomendamos revisar os arquivos listados acima para garantir que:');
  console.log('   1. Todas as refer√™ncias ao R2 tenham sido migradas para Supabase Storage');
  console.log('   2. Os caminhos de upload estejam configurados corretamente');
  console.log('   3. As vari√°veis de ambiente estejam definidas corretamente no ambiente de produ√ß√£o');
} else {
  console.log('‚úÖ N√£o foram encontradas inconsist√™ncias graves na configura√ß√£o de armazenamento.');
}

console.log('\nüí° Para garantir um deploy bem-sucedido:');
console.log('   1. Certifique-se de que todas as vari√°veis de ambiente do Supabase estejam configuradas no ambiente de produ√ß√£o');
console.log('   2. Verifique se a pasta "avatars" existe no bucket do Supabase Storage');
console.log('   3. Adicione as seguintes vari√°veis de ambiente no seu painel de deploy:');
console.log('      - SUPABASE_URL');
console.log('      - SUPABASE_ANON_KEY');
console.log('      - DATABASE_URL');
console.log('      - R2_BUCKET_NAME (para compatibilidade)');
console.log('      - BREVO_API_KEY (para funcionalidade de email)');

console.log('\nüöÄ Diagn√≥stico de configura√ß√£o para deploy conclu√≠do!');